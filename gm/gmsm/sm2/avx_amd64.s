//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT 路_set_i64(SB), $0-16

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI

	LONG $0x6ef9e1c4; BYTE $0xc6 // vmovq    xmm0, rsi
	LONG $0x6ef9e1c4; BYTE $0xcf // vmovq    xmm1, rdi
	LONG $0xc06cf1c5             // vpunpcklqdq    xmm0, xmm1, xmm0
	RET

TEXT 路_store_i64(SB), $0-32

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ d+24(FP), CX

	LONG $0x07d6f9c5               // vmovq    qword [rdi], xmm0
	LONG $0x16f9e3c4; WORD $0x0106 // vpextrq    qword [rsi], xmm0, 1
	RET

TEXT 路_store_i32(SB), $0-16

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI

	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x0789                   // mov    dword [rdi], eax
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	WORD $0x0689                   // mov    dword [rsi], eax
	RET

TEXT 路_sm2P256Mul2Way1(SB), $0-48

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ tmp2+24(FP), CX
	MOVQ a2+32(FP), R8
	MOVQ b2+40(FP), R9

	WORD $0x8b44; BYTE $0x3e                   // mov    r15d, dword [rsi]
	WORD $0x8b45; BYTE $0x18                   // mov    r11d, dword [r8]
	LONG $0x6ef9c1c4; BYTE $0xc3               // vmovq    xmm0, r11
	LONG $0x6ef9c1c4; BYTE $0xcf               // vmovq    xmm1, r15
	LONG $0xc86c71c5                           // vpunpcklqdq    xmm9, xmm1, xmm0
	WORD $0x8b44; BYTE $0x32                   // mov    r14d, dword [rdx]
	WORD $0x8b45; BYTE $0x11                   // mov    r10d, dword [r9]
	LONG $0x6ef9c1c4; BYTE $0xc2               // vmovq    xmm0, r10
	LONG $0x6ef9c1c4; BYTE $0xce               // vmovq    xmm1, r14
	LONG $0xd86c71c5                           // vpunpcklqdq    xmm11, xmm1, xmm0
	LONG $0xf421c1c4; BYTE $0xc1               // vpmuludq    xmm0, xmm11, xmm9
	LONG $0x07d6f9c5                           // vmovq    qword [rdi], xmm0
	LONG $0x16f9e3c4; WORD $0x0101             // vpextrq    qword [rcx], xmm0, 1
	WORD $0x468b; BYTE $0x04                   // mov    eax, dword [rsi + 4]
	LONG $0x04588b41                           // mov    ebx, dword [r8 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf06c71c5                           // vpunpcklqdq    xmm14, xmm1, xmm0
	WORD $0x428b; BYTE $0x04                   // mov    eax, dword [rdx + 4]
	LONG $0x04598b41                           // mov    ebx, dword [r9 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86c71c5                           // vpunpcklqdq    xmm15, xmm1, xmm0
	LONG $0xf401c1c4; BYTE $0xc1               // vpmuludq    xmm0, xmm15, xmm9
	LONG $0xf409c1c4; BYTE $0xcb               // vpmuludq    xmm1, xmm14, xmm11
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x08               // vmovq    qword [rdi + 8], xmm0
	LONG $0x16f9e3c4; WORD $0x0841; BYTE $0x01 // vpextrq    qword [rcx + 8], xmm0, 1
	WORD $0x468b; BYTE $0x08                   // mov    eax, dword [rsi + 8]
	LONG $0x08588b41                           // mov    ebx, dword [r8 + 8]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe06c71c5                           // vpunpcklqdq    xmm12, xmm1, xmm0
	WORD $0x428b; BYTE $0x08                   // mov    eax, dword [rdx + 8]
	LONG $0x08598b41                           // mov    ebx, dword [r9 + 8]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0xf439c1c4; BYTE $0xc1               // vpmuludq    xmm0, xmm8, xmm9
	LONG $0xf401c1c4; BYTE $0xce               // vpmuludq    xmm1, xmm15, xmm14
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xf419c1c4; BYTE $0xf3               // vpmuludq    xmm6, xmm12, xmm11
	LONG $0xc0d4c9c5                           // vpaddq    xmm0, xmm6, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x10               // vmovq    qword [rdi + 16], xmm0
	LONG $0x16f9e3c4; WORD $0x1041; BYTE $0x01 // vpextrq    qword [rcx + 16], xmm0, 1
	LONG $0x0c6e8b44                           // mov    r13d, dword [rsi + 12]
	LONG $0x0c608b45                           // mov    r12d, dword [r8 + 12]
	LONG $0x6ef9c1c4; BYTE $0xc4               // vmovq    xmm0, r12
	LONG $0x6ef9c1c4; BYTE $0xcd               // vmovq    xmm1, r13
	LONG $0xe86cf1c5                           // vpunpcklqdq    xmm5, xmm1, xmm0
	WORD $0x428b; BYTE $0x0c                   // mov    eax, dword [rdx + 12]
	LONG $0x0c598b41                           // mov    ebx, dword [r9 + 12]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd06c71c5                           // vpunpcklqdq    xmm10, xmm1, xmm0
	LONG $0xf429c1c4; BYTE $0xc1               // vpmuludq    xmm0, xmm10, xmm9
	LONG $0xf439c1c4; BYTE $0xce               // vpmuludq    xmm1, xmm8, xmm14
	LONG $0xf419c1c4; BYTE $0xff               // vpmuludq    xmm7, xmm12, xmm15
	LONG $0xcfd4f1c5                           // vpaddq    xmm1, xmm1, xmm7
	LONG $0xfdf4a1c5                           // vpmuludq    xmm7, xmm11, xmm5
	LONG $0xc0d4c1c5                           // vpaddq    xmm0, xmm7, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x18               // vmovq    qword [rdi + 24], xmm0
	LONG $0x16f9e3c4; WORD $0x1841; BYTE $0x01 // vpextrq    qword [rcx + 24], xmm0, 1
	WORD $0x468b; BYTE $0x10                   // mov    eax, dword [rsi + 16]
	LONG $0x10588b41                           // mov    ebx, dword [r8 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe86c71c5                           // vpunpcklqdq    xmm13, xmm1, xmm0
	WORD $0x5a8b; BYTE $0x10                   // mov    ebx, dword [rdx + 16]
	LONG $0x10418b41                           // mov    eax, dword [r9 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xf06cf1c5                           // vpunpcklqdq    xmm6, xmm1, xmm0
	LONG $0xf429c1c4; BYTE $0xc6               // vpmuludq    xmm0, xmm10, xmm14
	LONG $0xcdf481c5                           // vpmuludq    xmm1, xmm15, xmm5
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0xcef4b1c5                           // vpmuludq    xmm1, xmm9, xmm6
	LONG $0xf439c1c4; BYTE $0xe4               // vpmuludq    xmm4, xmm8, xmm12
	LONG $0xf411c1c4; BYTE $0xfb               // vpmuludq    xmm7, xmm13, xmm11
	LONG $0xe7d4d9c5                           // vpaddq    xmm4, xmm4, xmm7
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x20               // vmovq    qword [rdi + 32], xmm0
	LONG $0x16f9e3c4; WORD $0x2041; BYTE $0x01 // vpextrq    qword [rcx + 32], xmm0, 1
	LONG $0x14688b41                           // mov    ebp, dword [r8 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6e8b; BYTE $0x14                   // mov    ebp, dword [rsi + 20]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x14698b41                           // mov    ebp, dword [r9 + 20]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	WORD $0x6a8b; BYTE $0x14                   // mov    ebp, dword [rdx + 20]
	LONG $0x6ef9e1c4; BYTE $0xe5               // vmovq    xmm4, rbp
	LONG $0xc96cd9c5                           // vpunpcklqdq    xmm1, xmm4, xmm1
	LONG $0xe1f4b1c5                           // vpmuludq    xmm4, xmm9, xmm1
	LONG $0xfef489c5                           // vpmuludq    xmm7, xmm14, xmm6
	LONG $0xf429c1c4; BYTE $0xd4               // vpmuludq    xmm2, xmm10, xmm12
	LONG $0xddf4b9c5                           // vpmuludq    xmm3, xmm8, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xf411c1c4; BYTE $0xdf               // vpmuludq    xmm3, xmm13, xmm15
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xd8f4a1c5                           // vpmuludq    xmm3, xmm11, xmm0
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0x57d6f9c5; BYTE $0x28               // vmovq    qword [rdi + 40], xmm2
	LONG $0x16f9e3c4; WORD $0x2851; BYTE $0x01 // vpextrq    qword [rcx + 40], xmm2, 1
	LONG $0x18688b41                           // mov    ebp, dword [r8 + 24]
	LONG $0x6ef9e1c4; BYTE $0xd5               // vmovq    xmm2, rbp
	WORD $0x6e8b; BYTE $0x18                   // mov    ebp, dword [rsi + 24]
	LONG $0x6ef9e1c4; BYTE $0xdd               // vmovq    xmm3, rbp
	LONG $0x18698b41                           // mov    ebp, dword [r9 + 24]
	LONG $0x6ef9e1c4; BYTE $0xe5               // vmovq    xmm4, rbp
	WORD $0x6a8b; BYTE $0x18                   // mov    ebp, dword [rdx + 24]
	LONG $0x6ef9e1c4; BYTE $0xfd               // vmovq    xmm7, rbp
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0xdc6cc1c5                           // vpunpcklqdq    xmm3, xmm7, xmm4
	LONG $0xe1f489c5                           // vpmuludq    xmm4, xmm14, xmm1
	LONG $0xfdf4a9c5                           // vpmuludq    xmm7, xmm10, xmm5
	LONG $0xe8f481c5                           // vpmuludq    xmm5, xmm15, xmm0
	LONG $0xefd4d1c5                           // vpaddq    xmm5, xmm5, xmm7
	LONG $0xe4d4d1c5                           // vpaddq    xmm4, xmm5, xmm4
	LONG $0xe4d4d9c5                           // vpaddq    xmm4, xmm4, xmm4
	LONG $0xebf4b1c5                           // vpmuludq    xmm5, xmm9, xmm3
	LONG $0xfef499c5                           // vpmuludq    xmm7, xmm12, xmm6
	LONG $0xf411c1c4; BYTE $0xf0               // vpmuludq    xmm6, xmm13, xmm8
	LONG $0xf6d4c1c5                           // vpaddq    xmm6, xmm7, xmm6
	LONG $0xfaf4a1c5                           // vpmuludq    xmm7, xmm11, xmm2
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xedd4c9c5                           // vpaddq    xmm5, xmm6, xmm5
	LONG $0xe5d4d9c5                           // vpaddq    xmm4, xmm4, xmm5
	LONG $0x67d6f9c5; BYTE $0x30               // vmovq    qword [rdi + 48], xmm4
	LONG $0x16f9e3c4; WORD $0x3061; BYTE $0x01 // vpextrq    qword [rcx + 48], xmm4, 1
	LONG $0xdbf489c5                           // vpmuludq    xmm3, xmm14, xmm3
	LONG $0xc9f499c5                           // vpmuludq    xmm1, xmm12, xmm1
	LONG $0xf411c1c4; BYTE $0xe2               // vpmuludq    xmm4, xmm13, xmm10
	LONG $0xc0f4b9c5                           // vpmuludq    xmm0, xmm8, xmm0
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xd2f481c5                           // vpmuludq    xmm2, xmm15, xmm2
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc3d4f9c5                           // vpaddq    xmm0, xmm0, xmm3
	LONG $0x47d6f9c5; BYTE $0x38               // vmovq    qword [rdi + 56], xmm0
	LONG $0x16f9e3c4; WORD $0x3841; BYTE $0x01 // vpextrq    qword [rcx + 56], xmm0, 1
	WORD $0x528b; BYTE $0x1c                   // mov    edx, dword [rdx + 28]
	LONG $0xd7af0f49                           // imul    rdx, r15
	LONG $0xddaf0f49                           // imul    rbx, r13
	WORD $0x0148; BYTE $0xd3                   // add    rbx, rdx
	WORD $0x568b; BYTE $0x1c                   // mov    edx, dword [rsi + 28]
	LONG $0xd6af0f49                           // imul    rdx, r14
	LONG $0x385f0348                           // add    rbx, qword [rdi + 56]
	WORD $0x0148; BYTE $0xd3                   // add    rbx, rdx
	LONG $0x385f8948                           // mov    qword [rdi + 56], rbx
	LONG $0x1c518b41                           // mov    edx, dword [r9 + 28]
	LONG $0xd3af0f49                           // imul    rdx, r11
	LONG $0xc4af0f49                           // imul    rax, r12
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0x1c508b41                           // mov    edx, dword [r8 + 28]
	LONG $0xd2af0f49                           // imul    rdx, r10
	LONG $0x38410348                           // add    rax, qword [rcx + 56]
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0x38418948                           // mov    qword [rcx + 56], rax
	RET

TEXT 路_sm2P256Mul2Way2(SB), $0-48

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ tmp2+24(FP), CX
	MOVQ a2+32(FP), R8
	MOVQ b2+40(FP), R9

	QUAD $0x000000004847c748                   // mov    qword [rdi + 72], 0
	QUAD $0x000000004841c748                   // mov    qword [rcx + 72], 0
	LONG $0x20768b44                           // mov    r14d, dword [rsi + 32]
	LONG $0x20508b45                           // mov    r10d, dword [r8 + 32]
	LONG $0x6ef9c1c4; BYTE $0xc2               // vmovq    xmm0, r10
	LONG $0x6ef9c1c4; BYTE $0xce               // vmovq    xmm1, r14
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x207a8b44                           // mov    r15d, dword [rdx + 32]
	LONG $0x20598b45                           // mov    r11d, dword [r9 + 32]
	LONG $0x6ef9c1c4; BYTE $0xc3               // vmovq    xmm0, r11
	LONG $0x6ef9c1c4; BYTE $0xcf               // vmovq    xmm1, r15
	LONG $0xe86c71c5                           // vpunpcklqdq    xmm13, xmm1, xmm0
	LONG $0xf411c1c4; BYTE $0xc0               // vpmuludq    xmm0, xmm13, xmm8
	QUAD $0x0000008087d6f9c5                   // vmovq    qword [rdi + 128], xmm0
	QUAD $0x0000808116f9e3c4; WORD $0x0100     // vpextrq    qword [rcx + 128], xmm0, 1
	WORD $0x468b; BYTE $0x1c                   // mov    eax, dword [rsi + 28]
	LONG $0x1c588b41                           // mov    ebx, dword [r8 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd06c71c5                           // vpunpcklqdq    xmm10, xmm1, xmm0
	WORD $0x428b; BYTE $0x1c                   // mov    eax, dword [rdx + 28]
	LONG $0x1c598b41                           // mov    ebx, dword [r9 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc86c71c5                           // vpunpcklqdq    xmm9, xmm1, xmm0
	LONG $0xf429c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm10, xmm13
	LONG $0xf431c1c4; BYTE $0xc8               // vpmuludq    xmm1, xmm9, xmm8
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x78               // vmovq    qword [rdi + 120], xmm0
	LONG $0x16f9e3c4; WORD $0x7841; BYTE $0x01 // vpextrq    qword [rcx + 120], xmm0, 1
	WORD $0x468b; BYTE $0x18                   // mov    eax, dword [rsi + 24]
	LONG $0x18588b41                           // mov    ebx, dword [r8 + 24]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd86c71c5                           // vpunpcklqdq    xmm11, xmm1, xmm0
	WORD $0x428b; BYTE $0x18                   // mov    eax, dword [rdx + 24]
	LONG $0x18598b41                           // mov    ebx, dword [r9 + 24]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86c71c5                           // vpunpcklqdq    xmm15, xmm1, xmm0
	LONG $0xf421c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm11, xmm13
	LONG $0xf431c1c4; BYTE $0xca               // vpmuludq    xmm1, xmm9, xmm10
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xf401c1c4; BYTE $0xe0               // vpmuludq    xmm4, xmm15, xmm8
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x70               // vmovq    qword [rdi + 112], xmm0
	LONG $0x16f9e3c4; WORD $0x7041; BYTE $0x01 // vpextrq    qword [rcx + 112], xmm0, 1
	WORD $0x468b; BYTE $0x14                   // mov    eax, dword [rsi + 20]
	LONG $0x14588b41                           // mov    ebx, dword [r8 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe06c71c5                           // vpunpcklqdq    xmm12, xmm1, xmm0
	LONG $0x146a8b44                           // mov    r13d, dword [rdx + 20]
	LONG $0x14618b45                           // mov    r12d, dword [r9 + 20]
	LONG $0x6ef9c1c4; BYTE $0xc4               // vmovq    xmm0, r12
	LONG $0x6ef9c1c4; BYTE $0xcd               // vmovq    xmm1, r13
	LONG $0xf06c71c5                           // vpunpcklqdq    xmm14, xmm1, xmm0
	LONG $0xf419c1c4; BYTE $0xc5               // vpmuludq    xmm0, xmm12, xmm13
	LONG $0xf421c1c4; BYTE $0xc9               // vpmuludq    xmm1, xmm11, xmm9
	LONG $0xf401c1c4; BYTE $0xe2               // vpmuludq    xmm4, xmm15, xmm10
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0xf409c1c4; BYTE $0xe0               // vpmuludq    xmm4, xmm14, xmm8
	LONG $0xc4d4f9c5                           // vpaddq    xmm0, xmm0, xmm4
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0x47d6f9c5; BYTE $0x68               // vmovq    qword [rdi + 104], xmm0
	LONG $0x16f9e3c4; WORD $0x6841; BYTE $0x01 // vpextrq    qword [rcx + 104], xmm0, 1
	WORD $0x468b; BYTE $0x10                   // mov    eax, dword [rsi + 16]
	LONG $0x10588b41                           // mov    ebx, dword [r8 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd86cf1c5                           // vpunpcklqdq    xmm3, xmm1, xmm0
	LONG $0x10698b41                           // mov    ebp, dword [r9 + 16]
	LONG $0x6ef9e1c4; BYTE $0xc5               // vmovq    xmm0, rbp
	WORD $0x6a8b; BYTE $0x10                   // mov    ebp, dword [rdx + 16]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xf419c1c4; BYTE $0xc9               // vpmuludq    xmm1, xmm12, xmm9
	LONG $0xf409c1c4; BYTE $0xe2               // vpmuludq    xmm4, xmm14, xmm10
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xe3f491c5                           // vpmuludq    xmm4, xmm13, xmm3
	LONG $0xf401c1c4; BYTE $0xf3               // vpmuludq    xmm6, xmm15, xmm11
	LONG $0xe4d4c9c5                           // vpaddq    xmm4, xmm6, xmm4
	LONG $0xf0f4b9c5                           // vpmuludq    xmm6, xmm8, xmm0
	LONG $0xe6d4d9c5                           // vpaddq    xmm4, xmm4, xmm6
	LONG $0xccd4f1c5                           // vpaddq    xmm1, xmm1, xmm4
	LONG $0x4fd6f9c5; BYTE $0x60               // vmovq    qword [rdi + 96], xmm1
	LONG $0x16f9e3c4; WORD $0x6049; BYTE $0x01 // vpextrq    qword [rcx + 96], xmm1, 1
	LONG $0x0c688b41                           // mov    ebp, dword [r8 + 12]
	LONG $0x6ef9e1c4; BYTE $0xcd               // vmovq    xmm1, rbp
	WORD $0x6e8b; BYTE $0x0c                   // mov    ebp, dword [rsi + 12]
	LONG $0x6ef9e1c4; BYTE $0xe5               // vmovq    xmm4, rbp
	LONG $0xc96cd9c5                           // vpunpcklqdq    xmm1, xmm4, xmm1
	LONG $0x0c698b41                           // mov    ebp, dword [r9 + 12]
	LONG $0x6ef9e1c4; BYTE $0xe5               // vmovq    xmm4, rbp
	WORD $0x6a8b; BYTE $0x0c                   // mov    ebp, dword [rdx + 12]
	LONG $0x6ef9e1c4; BYTE $0xf5               // vmovq    xmm6, rbp
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xf1f491c5                           // vpmuludq    xmm6, xmm13, xmm1
	LONG $0xd3f4b1c5                           // vpmuludq    xmm2, xmm9, xmm3
	LONG $0xf419c1c4; BYTE $0xff               // vpmuludq    xmm7, xmm12, xmm15
	LONG $0xf409c1c4; BYTE $0xeb               // vpmuludq    xmm5, xmm14, xmm11
	LONG $0xefd4d1c5                           // vpaddq    xmm5, xmm5, xmm7
	LONG $0xf8f4a9c5                           // vpmuludq    xmm7, xmm10, xmm0
	LONG $0xd7d4e9c5                           // vpaddq    xmm2, xmm2, xmm7
	LONG $0xd2d4d1c5                           // vpaddq    xmm2, xmm5, xmm2
	LONG $0xecf4b9c5                           // vpmuludq    xmm5, xmm8, xmm4
	LONG $0xedd4c9c5                           // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd5d4e9c5                           // vpaddq    xmm2, xmm2, xmm5
	LONG $0x57d6f9c5; BYTE $0x58               // vmovq    qword [rdi + 88], xmm2
	LONG $0x16f9e3c4; WORD $0x5851; BYTE $0x01 // vpextrq    qword [rcx + 88], xmm2, 1
	LONG $0x08688b41                           // mov    ebp, dword [r8 + 8]
	LONG $0x6ef9e1c4; BYTE $0xd5               // vmovq    xmm2, rbp
	WORD $0x6e8b; BYTE $0x08                   // mov    ebp, dword [rsi + 8]
	LONG $0x6ef9e1c4; BYTE $0xed               // vmovq    xmm5, rbp
	LONG $0x08698b41                           // mov    ebp, dword [r9 + 8]
	LONG $0x6ef9e1c4; BYTE $0xf5               // vmovq    xmm6, rbp
	WORD $0x6a8b; BYTE $0x08                   // mov    ebp, dword [rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xfd               // vmovq    xmm7, rbp
	LONG $0xd26cd1c5                           // vpunpcklqdq    xmm2, xmm5, xmm2
	LONG $0xee6cc1c5                           // vpunpcklqdq    xmm5, xmm7, xmm6
	LONG $0xf1f4b1c5                           // vpmuludq    xmm6, xmm9, xmm1
	LONG $0xf409c1c4; BYTE $0xfc               // vpmuludq    xmm7, xmm14, xmm12
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xfcf4a9c5                           // vpmuludq    xmm7, xmm10, xmm4
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xf6d449c5                           // vpaddq    xmm14, xmm6, xmm6
	LONG $0xfaf491c5                           // vpmuludq    xmm7, xmm13, xmm2
	LONG $0xf3f481c5                           // vpmuludq    xmm6, xmm15, xmm3
	LONG $0xd8f4a1c5                           // vpmuludq    xmm3, xmm11, xmm0
	LONG $0xded4e1c5                           // vpaddq    xmm3, xmm3, xmm6
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xf5f4b9c5                           // vpmuludq    xmm6, xmm8, xmm5
	LONG $0xded4e1c5                           // vpaddq    xmm3, xmm3, xmm6
	LONG $0xdbd489c5                           // vpaddq    xmm3, xmm14, xmm3
	LONG $0x5fd6f9c5; BYTE $0x50               // vmovq    qword [rdi + 80], xmm3
	LONG $0x16f9e3c4; WORD $0x5059; BYTE $0x01 // vpextrq    qword [rcx + 80], xmm3, 1
	LONG $0xd2f4b1c5                           // vpmuludq    xmm2, xmm9, xmm2
	LONG $0xc9f481c5                           // vpmuludq    xmm1, xmm15, xmm1
	LONG $0xc0f499c5                           // vpmuludq    xmm0, xmm12, xmm0
	LONG $0xc0d4f1c5                           // vpaddq    xmm0, xmm1, xmm0
	LONG $0xccf4a1c5                           // vpmuludq    xmm1, xmm11, xmm4
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0xcdf4a9c5                           // vpmuludq    xmm1, xmm10, xmm5
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x48               // vmovq    qword [rdi + 72], xmm0
	LONG $0x16f9e3c4; WORD $0x4841; BYTE $0x01 // vpextrq    qword [rcx + 72], xmm0, 1
	WORD $0x768b; BYTE $0x04                   // mov    esi, dword [rsi + 4]
	LONG $0xf7af0f49                           // imul    rsi, r15
	LONG $0xc5af0f49                           // imul    rax, r13
	WORD $0x0148; BYTE $0xf0                   // add    rax, rsi
	WORD $0x528b; BYTE $0x04                   // mov    edx, dword [rdx + 4]
	LONG $0xd6af0f49                           // imul    rdx, r14
	LONG $0x48470348                           // add    rax, qword [rdi + 72]
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0x48478948                           // mov    qword [rdi + 72], rax
	LONG $0x04408b41                           // mov    eax, dword [r8 + 4]
	LONG $0xc3af0f49                           // imul    rax, r11
	LONG $0xdcaf0f49                           // imul    rbx, r12
	WORD $0x0148; BYTE $0xc3                   // add    rbx, rax
	LONG $0x04418b41                           // mov    eax, dword [r9 + 4]
	LONG $0xc2af0f49                           // imul    rax, r10
	LONG $0x48590348                           // add    rbx, qword [rcx + 72]
	WORD $0x0148; BYTE $0xc3                   // add    rbx, rax
	LONG $0x48598948                           // mov    qword [rcx + 72], rbx
	RET

TEXT 路_sm2P256Mul2Way3(SB), $152-48

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ tmp2+24(FP), CX
	MOVQ a2+32(FP), R8
	MOVQ b2+40(FP), R9
	ADDQ $8, SP

	WORD $0x8b44; BYTE $0x16                   // mov    r10d, dword [rsi]
	WORD $0x5e8b; BYTE $0x04                   // mov    ebx, dword [rsi + 4]
	WORD $0x8b45; BYTE $0x30                   // mov    r14d, dword [r8]
	LONG $0x04408b41                           // mov    eax, dword [r8 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	QUAD $0x00008024847ff9c5; BYTE $0x00       // vmovdqa    oword [rsp + 128], xmm0
	WORD $0x428b; BYTE $0x1c                   // mov    eax, dword [rdx + 28]
	LONG $0x1c598b41                           // mov    ebx, dword [r9 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86c71c5                           // vpunpcklqdq    xmm15, xmm1, xmm0
	WORD $0x468b; BYTE $0x0c                   // mov    eax, dword [rsi + 12]
	LONG $0x0c588b41                           // mov    ebx, dword [r8 + 12]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x447ff9c5; WORD $0x7024             // vmovdqa    oword [rsp + 112], xmm0
	WORD $0x428b; BYTE $0x14                   // mov    eax, dword [rdx + 20]
	LONG $0x14598b41                           // mov    ebx, dword [r9 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf06c71c5                           // vpunpcklqdq    xmm14, xmm1, xmm0
	WORD $0x468b; BYTE $0x14                   // mov    eax, dword [rsi + 20]
	LONG $0x14588b41                           // mov    ebx, dword [r8 + 20]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xe86c71c5                           // vpunpcklqdq    xmm13, xmm1, xmm0
	WORD $0x428b; BYTE $0x0c                   // mov    eax, dword [rdx + 12]
	LONG $0x0c598b41                           // mov    ebx, dword [r9 + 12]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xd06c71c5                           // vpunpcklqdq    xmm10, xmm1, xmm0
	WORD $0x468b; BYTE $0x1c                   // mov    eax, dword [rsi + 28]
	LONG $0x1c588b41                           // mov    ebx, dword [r8 + 28]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x447ff9c5; WORD $0x6024             // vmovdqa    oword [rsp + 96], xmm0
	WORD $0x8b44; BYTE $0x1a                   // mov    r11d, dword [rdx]
	WORD $0x428b; BYTE $0x04                   // mov    eax, dword [rdx + 4]
	WORD $0x8b45; BYTE $0x39                   // mov    r15d, dword [r9]
	LONG $0x04598b41                           // mov    ebx, dword [r9 + 4]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xf86cf1c5                           // vpunpcklqdq    xmm7, xmm1, xmm0
	LONG $0x6ef9c1c4; BYTE $0xc6               // vmovq    xmm0, r14
	LONG $0x6ef9c1c4; BYTE $0xca               // vmovq    xmm1, r10
	LONG $0xc86c71c5                           // vpunpcklqdq    xmm9, xmm1, xmm0
	LONG $0x4c7f79c5; WORD $0x3024             // vmovdqa    oword [rsp + 48], xmm9
	WORD $0x468b; BYTE $0x08                   // mov    eax, dword [rsi + 8]
	LONG $0x08588b41                           // mov    ebx, dword [r8 + 8]
	LONG $0x6ef9e1c4; BYTE $0xc3               // vmovq    xmm0, rbx
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x447ff9c5; WORD $0x1024             // vmovdqa    oword [rsp + 16], xmm0
	WORD $0x428b; BYTE $0x18                   // mov    eax, dword [rdx + 24]
	LONG $0x18598b41                           // mov    ebx, dword [r9 + 24]
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0xe16c69c5                           // vpunpcklqdq    xmm12, xmm2, xmm1
	LONG $0x247f79c5; BYTE $0x24               // vmovdqa    oword [rsp], xmm12
	WORD $0x468b; BYTE $0x10                   // mov    eax, dword [rsi + 16]
	LONG $0x10588b41                           // mov    ebx, dword [r8 + 16]
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xca6ce1c5                           // vpunpcklqdq    xmm1, xmm3, xmm2
	WORD $0x428b; BYTE $0x10                   // mov    eax, dword [rdx + 16]
	LONG $0x10598b41                           // mov    ebx, dword [r9 + 16]
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0xe26cd9c5                           // vpunpcklqdq    xmm4, xmm4, xmm2
	WORD $0x468b; BYTE $0x18                   // mov    eax, dword [rsi + 24]
	LONG $0x18588b41                           // mov    ebx, dword [r8 + 24]
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0xda6c51c5                           // vpunpcklqdq    xmm11, xmm5, xmm2
	WORD $0x428b; BYTE $0x08                   // mov    eax, dword [rdx + 8]
	LONG $0x08598b41                           // mov    ebx, dword [r9 + 8]
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0xea6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm2
	LONG $0x6ef9c1c4; BYTE $0xf7               // vmovq    xmm6, r15
	LONG $0x6ef941c4; BYTE $0xc3               // vmovq    xmm8, r11
	LONG $0xc66c39c5                           // vpunpcklqdq    xmm8, xmm8, xmm6
	LONG $0xf431c1c4; BYTE $0xf7               // vpmuludq    xmm6, xmm9, xmm15
	LONG $0x6f79c1c4; BYTE $0xde               // vmovdqa    xmm3, xmm14
	LONG $0x747f79c5; WORD $0x2024             // vmovdqa    oword [rsp + 32], xmm14
	LONG $0xc8f409c5                           // vpmuludq    xmm9, xmm14, xmm0
	LONG $0xced431c5                           // vpaddq    xmm9, xmm9, xmm6
	QUAD $0x00008024846ff9c5; BYTE $0x00       // vmovdqa    xmm0, oword [rsp + 128]
	LONG $0xf0f499c5                           // vpmuludq    xmm6, xmm12, xmm0
	LONG $0x6f79c1c4; BYTE $0xd2               // vmovdqa    xmm2, xmm10
	LONG $0x547f79c5; WORD $0x4024             // vmovdqa    oword [rsp + 64], xmm10
	LONG $0xd1f429c5                           // vpmuludq    xmm10, xmm10, xmm1
	LONG $0xe16f79c5                           // vmovdqa    xmm12, xmm1
	LONG $0xf6d4a9c5                           // vpaddq    xmm6, xmm10, xmm6
	LONG $0xced431c5                           // vpaddq    xmm9, xmm9, xmm6
	LONG $0x546f79c5; WORD $0x7024             // vmovdqa    xmm10, oword [rsp + 112]
	LONG $0xf4f4a9c5                           // vpmuludq    xmm6, xmm10, xmm4
	LONG $0xcf6ff9c5                           // vmovdqa    xmm1, xmm7
	LONG $0x7c7ff9c5; WORD $0x5024             // vmovdqa    oword [rsp + 80], xmm7
	LONG $0xfff4a1c5                           // vpmuludq    xmm7, xmm11, xmm7
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0x6f7941c4; BYTE $0xf5               // vmovdqa    xmm14, xmm13
	LONG $0xfdf491c5                           // vpmuludq    xmm7, xmm13, xmm5
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xf6d4b1c5                           // vpaddq    xmm6, xmm9, xmm6
	LONG $0x6c6f79c5; WORD $0x6024             // vmovdqa    xmm13, oword [rsp + 96]
	LONG $0xf439c1c4; BYTE $0xfd               // vpmuludq    xmm7, xmm8, xmm13
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0x77d6f9c5; BYTE $0x38               // vmovq    qword [rdi + 56], xmm6
	LONG $0x16f9e3c4; WORD $0x3871; BYTE $0x01 // vpextrq    qword [rcx + 56], xmm6, 1
	LONG $0xf0f481c5                           // vpmuludq    xmm6, xmm15, xmm0
	LONG $0xc86f79c5                           // vmovdqa    xmm9, xmm0
	LONG $0xfbf4a9c5                           // vpmuludq    xmm7, xmm10, xmm3
	LONG $0xf6d4c1c5                           // vpaddq    xmm6, xmm7, xmm6
	LONG $0xfaf489c5                           // vpmuludq    xmm7, xmm14, xmm2
	LONG $0xc1f491c5                           // vpmuludq    xmm0, xmm13, xmm1
	LONG $0xc0d4c1c5                           // vpaddq    xmm0, xmm7, xmm0
	LONG $0xc0d4c9c5                           // vpaddq    xmm0, xmm6, xmm0
	WORD $0x428b; BYTE $0x20                   // mov    eax, dword [rdx + 32]
	LONG $0x20518b41                           // mov    edx, dword [r9 + 32]
	LONG $0x6ef9e1c4; BYTE $0xf2               // vmovq    xmm6, rdx
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x546ff9c5; WORD $0x1024             // vmovdqa    xmm2, oword [rsp + 16]
	LONG $0x1c6ff9c5; BYTE $0x24               // vmovdqa    xmm3, oword [rsp]
	LONG $0xfaf4e1c5                           // vpmuludq    xmm7, xmm3, xmm2
	LONG $0xccf499c5                           // vpmuludq    xmm1, xmm12, xmm4
	LONG $0xc9d4c1c5                           // vpaddq    xmm1, xmm7, xmm1
	LONG $0xfdf4a1c5                           // vpmuludq    xmm7, xmm11, xmm5
	LONG $0xcfd4f1c5                           // vpaddq    xmm1, xmm1, xmm7
	LONG $0x7cf4c9c5; WORD $0x3024             // vpmuludq    xmm7, xmm6, oword [rsp + 48]
	LONG $0xcfd4f1c5                           // vpaddq    xmm1, xmm1, xmm7
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	WORD $0x468b; BYTE $0x20                   // mov    eax, dword [rsi + 32]
	LONG $0x20508b41                           // mov    edx, dword [r8 + 32]
	LONG $0x6ef9e1c4; BYTE $0xca               // vmovq    xmm1, rdx
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0xc96cc1c5                           // vpunpcklqdq    xmm1, xmm7, xmm1
	LONG $0xf9f4b9c5                           // vpmuludq    xmm7, xmm8, xmm1
	LONG $0xc7d4f9c5                           // vpaddq    xmm0, xmm0, xmm7
	LONG $0x47d6f9c5; BYTE $0x40               // vmovq    qword [rdi + 64], xmm0
	LONG $0x16f9e3c4; WORD $0x4041; BYTE $0x01 // vpextrq    qword [rcx + 64], xmm0, 1
	LONG $0xc6f4b1c5                           // vpmuludq    xmm0, xmm9, xmm6
	LONG $0xf2f481c5                           // vpmuludq    xmm6, xmm15, xmm2
	LONG $0xfbf4a9c5                           // vpmuludq    xmm7, xmm10, xmm3
	LONG $0xf6d4c1c5                           // vpaddq    xmm6, xmm7, xmm6
	LONG $0x5cf499c5; WORD $0x2024             // vpmuludq    xmm3, xmm12, oword [rsp + 32]
	LONG $0xe4f489c5                           // vpmuludq    xmm4, xmm14, xmm4
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xdbd4c9c5                           // vpaddq    xmm3, xmm6, xmm3
	LONG $0x64f4a1c5; WORD $0x4024             // vpmuludq    xmm4, xmm11, oword [rsp + 64]
	LONG $0xd5f491c5                           // vpmuludq    xmm2, xmm13, xmm5
	LONG $0xd2d4d9c5                           // vpaddq    xmm2, xmm4, xmm2
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0x4cf4f1c5; WORD $0x5024             // vpmuludq    xmm1, xmm1, oword [rsp + 80]
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x48               // vmovq    qword [rdi + 72], xmm0
	LONG $0x16f9e3c4; WORD $0x4841; BYTE $0x01 // vpextrq    qword [rcx + 72], xmm0, 1
	SUBQ $8, SP
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x01ffffffffffff80
DATA LCDATA1<>+0x008(SB)/8, $0x01ffffffffffff80
DATA LCDATA1<>+0x010(SB)/8, $0x01ffff8000000000
DATA LCDATA1<>+0x018(SB)/8, $0x01ffff8000000000
DATA LCDATA1<>+0x020(SB)/8, $0x0200000000000000
DATA LCDATA1<>+0x028(SB)/8, $0x0200000000000000
DATA LCDATA1<>+0x030(SB)/8, $0x01ffffffffffffff
DATA LCDATA1<>+0x038(SB)/8, $0x01ffffffffffffff
DATA LCDATA1<>+0x040(SB)/8, $0x01e0000000000000
DATA LCDATA1<>+0x048(SB)/8, $0x01e0000000000000
DATA LCDATA1<>+0x050(SB)/8, $0x01fffffff0000000
DATA LCDATA1<>+0x058(SB)/8, $0x01fffffff0000000
DATA LCDATA1<>+0x060(SB)/8, $0x000000001fffffff
DATA LCDATA1<>+0x068(SB)/8, $0x000000001fffffff
GLOBL LCDATA1<>(SB), 8, $112

TEXT 路_reduceDegree_2way(SB), $0-32

	MOVQ tmp64+0(FP), DI
	MOVQ x64+8(FP), SI
	MOVQ tmp642+16(FP), DX
	MOVQ x642+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	LONG $0x6ef9e1c4; BYTE $0xc1               // vmovq    xmm0, rcx
	LONG $0x6ef9e1c4; BYTE $0xce               // vmovq    xmm1, rsi
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x4a7efac5; BYTE $0x08               // vmovq    xmm1, qword [rdx + 8]
	LONG $0x577efac5; BYTE $0x08               // vmovq    xmm2, qword [rdi + 8]
	LONG $0xf073e1c5; BYTE $0x07               // vpsllq    xmm3, xmm0, 7
	LONG $0x5ddbe1c5; BYTE $0x00               // vpand    xmm3, xmm3, oword 0[rbp] /* [rip + .LCPI6_0] */
	LONG $0xf073d9c5; BYTE $0x27               // vpsllq    xmm4, xmm0, 39
	LONG $0x65dbd9c5; BYTE $0x10               // vpand    xmm4, xmm4, oword 16[rbp] /* [rip + .LCPI6_1] */
	LONG $0x5debe1c5; BYTE $0x20               // vpor    xmm3, xmm3, oword 32[rbp] /* [rip + .LCPI6_2] */
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd4fbe1c5                           // vpsubq    xmm2, xmm3, xmm4
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0x4fd6f9c5; BYTE $0x08               // vmovq    qword [rdi + 8], xmm1
	LONG $0x16f9e3c4; WORD $0x084a; BYTE $0x01 // vpextrq    qword [rdx + 8], xmm1, 1
	LONG $0x4a7efac5; BYTE $0x10               // vmovq    xmm1, qword [rdx + 16]
	LONG $0x577efac5; BYTE $0x10               // vmovq    xmm2, qword [rdi + 16]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xe072e9c5; BYTE $0x1f               // vpsrad    xmm2, xmm0, 31
	LONG $0xe072e1c5; BYTE $0x12               // vpsrad    xmm3, xmm0, 18
	LONG $0xe370f9c5; BYTE $0xf5               // vpshufd    xmm4, xmm3, 245
	LONG $0x0259e3c4; WORD $0x0ad2             // vpblendd    xmm2, xmm4, xmm2, 10
	LONG $0xd073d9c5; BYTE $0x12               // vpsrlq    xmm4, xmm0, 18
	LONG $0x0259e3c4; WORD $0x0adb             // vpblendd    xmm3, xmm4, xmm3, 10
	LONG $0xd3fbe9c5                           // vpsubq    xmm2, xmm2, xmm3
	LONG $0x5d6ff9c5; BYTE $0x30               // vmovdqa    xmm3, oword 48[rbp] /* [rip + .LCPI6_3] */
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0x4fd6f9c5; BYTE $0x10               // vmovq    qword [rdi + 16], xmm1
	LONG $0x16f9e3c4; WORD $0x104a; BYTE $0x01 // vpextrq    qword [rdx + 16], xmm1, 1
	LONG $0x4a7efac5; BYTE $0x18               // vmovq    xmm1, qword [rdx + 24]
	LONG $0x577efac5; BYTE $0x18               // vmovq    xmm2, qword [rdi + 24]
	LONG $0xf073d9c5; BYTE $0x35               // vpsllq    xmm4, xmm0, 53
	LONG $0x65dbd9c5; BYTE $0x40               // vpand    xmm4, xmm4, oword 64[rbp] /* [rip + .LCPI6_4] */
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd3efd9c5                           // vpxor    xmm2, xmm4, xmm3
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0x4fd6f9c5; BYTE $0x18               // vmovq    qword [rdi + 24], xmm1
	LONG $0x16f9e3c4; WORD $0x184a; BYTE $0x01 // vpextrq    qword [rdx + 24], xmm1, 1
	LONG $0x4a7efac5; BYTE $0x20               // vmovq    xmm1, qword [rdx + 32]
	LONG $0x577efac5; BYTE $0x20               // vmovq    xmm2, qword [rdi + 32]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd073e9c5; BYTE $0x04               // vpsrlq    xmm2, xmm0, 4
	LONG $0xf073d9c5; BYTE $0x1c               // vpsllq    xmm4, xmm0, 28
	LONG $0x65dbd9c5; BYTE $0x50               // vpand    xmm4, xmm4, oword 80[rbp] /* [rip + .LCPI6_5] */
	LONG $0xd3dfe9c5                           // vpandn    xmm2, xmm2, xmm3
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xc9d4d9c5                           // vpaddq    xmm1, xmm4, xmm1
	LONG $0x4fd6f9c5; BYTE $0x20               // vmovq    qword [rdi + 32], xmm1
	LONG $0x16f9e3c4; WORD $0x204a; BYTE $0x01 // vpextrq    qword [rdx + 32], xmm1, 1
	LONG $0x4a7efac5; BYTE $0x28               // vmovq    xmm1, qword [rdx + 40]
	LONG $0x577efac5; BYTE $0x28               // vmovq    xmm2, qword [rdi + 40]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd073f9c5; BYTE $0x1d               // vpsrlq    xmm0, xmm0, 29
	LONG $0x45dbf9c5; BYTE $0x60               // vpand    xmm0, xmm0, oword 96[rbp] /* [rip + .LCPI6_6] */
	LONG $0xd276e9c5                           // vpcmpeqd    xmm2, xmm2, xmm2
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x28               // vmovq    qword [rdi + 40], xmm0
	LONG $0x16f9e3c4; WORD $0x2842; BYTE $0x01 // vpextrq    qword [rdx + 40], xmm0, 1
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x01ffffffffffff80
DATA LCDATA2<>+0x008(SB)/8, $0x01ffffffffffff80
DATA LCDATA2<>+0x010(SB)/8, $0x01ffff8000000000
DATA LCDATA2<>+0x018(SB)/8, $0x01ffff8000000000
DATA LCDATA2<>+0x020(SB)/8, $0x0200000000000000
DATA LCDATA2<>+0x028(SB)/8, $0x0200000000000000
DATA LCDATA2<>+0x030(SB)/8, $0x01ffffffffffffff
DATA LCDATA2<>+0x038(SB)/8, $0x01ffffffffffffff
DATA LCDATA2<>+0x040(SB)/8, $0x01e0000000000000
DATA LCDATA2<>+0x048(SB)/8, $0x01e0000000000000
DATA LCDATA2<>+0x050(SB)/8, $0x01fffffff0000000
DATA LCDATA2<>+0x058(SB)/8, $0x01fffffff0000000
GLOBL LCDATA2<>(SB), 8, $96

TEXT 路_reduceDegree_2wayNew(SB), $0-16

	MOVQ tmp64+0(FP), DI
	MOVQ tmp642+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	QUAD $0xffffffffffffba49; WORD $0x01ff // mov    r10, 144115188075855871
	QUAD $0xff8000000000b849; WORD $0x01ff // mov    r8, 144114638320041984
	QUAD $0x000000000000b949; WORD $0x01e0 // mov    r9, 135107988821114880
	WORD $0xc931                           // xor    ecx, ecx
	LONG $0x456f79c5; BYTE $0x00           // vmovdqa    xmm8, oword 0[rbp] /* [rip + .LCPI7_0] */
	LONG $0x4d6f79c5; BYTE $0x10           // vmovdqa    xmm9, oword 16[rbp] /* [rip + .LCPI7_1] */
	LONG $0x556f79c5; BYTE $0x20           // vmovdqa    xmm10, oword 32[rbp] /* [rip + .LCPI7_2] */
	LONG $0x5d6ff9c5; BYTE $0x30           // vmovdqa    xmm3, oword 48[rbp] /* [rip + .LCPI7_3] */
	LONG $0x656ff9c5; BYTE $0x40           // vmovdqa    xmm4, oword 64[rbp] /* [rip + .LCPI7_4] */
	LONG $0x6d6ff9c5; BYTE $0x50           // vmovdqa    xmm5, oword 80[rbp] /* [rip + .LCPI7_5] */
	LONG $0xf676c9c5                       // vpcmpeqd    xmm6, xmm6, xmm6
	JMP  LBB7_1

LBB7_6:
	LONG $0x6ef9c1c4; BYTE $0xfb   // vmovq    xmm7, r11
	LONG $0x6ef9e1c4; BYTE $0xc2   // vmovq    xmm0, rdx
	LONG $0xff6cf9c5               // vpunpcklqdq    xmm7, xmm0, xmm7
	LONG $0x447efac5; WORD $0x08ce // vmovq    xmm0, qword [rsi + 8*rcx + 8]
	LONG $0x4c7efac5; WORD $0x08cf // vmovq    xmm1, qword [rdi + 8*rcx + 8]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xf773f1c5; BYTE $0x07   // vpsllq    xmm1, xmm7, 7
	LONG $0xc9dbb9c5               // vpand    xmm1, xmm8, xmm1
	LONG $0xc9eba9c5               // vpor    xmm1, xmm10, xmm1
	LONG $0xf773e9c5; BYTE $0x27   // vpsllq    xmm2, xmm7, 39
	LONG $0xd2dbb1c5               // vpand    xmm2, xmm9, xmm2
	LONG $0xcafbf1c5               // vpsubq    xmm1, xmm1, xmm2
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0x44d6f9c5; WORD $0x08cf // vmovq    qword [rdi + 8*rcx + 8], xmm0
	QUAD $0x0108ce4416f9e3c4       // vpextrq    qword [rsi + 8*rcx + 8], xmm0, 1
	LONG $0x447efac5; WORD $0x10ce // vmovq    xmm0, qword [rsi + 8*rcx + 16]
	LONG $0x4c7efac5; WORD $0x10cf // vmovq    xmm1, qword [rdi + 8*rcx + 16]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xd773f1c5; BYTE $0x32   // vpsrlq    xmm1, xmm7, 50
	LONG $0xd773e9c5; BYTE $0x12   // vpsrlq    xmm2, xmm7, 18
	LONG $0xcafbf1c5               // vpsubq    xmm1, xmm1, xmm2
	LONG $0xc3d4f9c5               // vpaddq    xmm0, xmm0, xmm3
	LONG $0xc0d4f1c5               // vpaddq    xmm0, xmm1, xmm0
	LONG $0x44d6f9c5; WORD $0x10cf // vmovq    qword [rdi + 8*rcx + 16], xmm0
	QUAD $0x0110ce4416f9e3c4       // vpextrq    qword [rsi + 8*rcx + 16], xmm0, 1
	LONG $0x447efac5; WORD $0x18ce // vmovq    xmm0, qword [rsi + 8*rcx + 24]
	LONG $0x4c7efac5; WORD $0x18cf // vmovq    xmm1, qword [rdi + 8*rcx + 24]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xf773f1c5; BYTE $0x35   // vpsllq    xmm1, xmm7, 53
	LONG $0xccdbf1c5               // vpand    xmm1, xmm1, xmm4
	LONG $0xcbeff1c5               // vpxor    xmm1, xmm1, xmm3
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0x44d6f9c5; WORD $0x18cf // vmovq    qword [rdi + 8*rcx + 24], xmm0
	QUAD $0x0118ce4416f9e3c4       // vpextrq    qword [rsi + 8*rcx + 24], xmm0, 1
	LONG $0x447efac5; WORD $0x20ce // vmovq    xmm0, qword [rsi + 8*rcx + 32]
	LONG $0x4c7efac5; WORD $0x20cf // vmovq    xmm1, qword [rdi + 8*rcx + 32]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xd773f1c5; BYTE $0x04   // vpsrlq    xmm1, xmm7, 4
	LONG $0xf773e9c5; BYTE $0x1c   // vpsllq    xmm2, xmm7, 28
	LONG $0xd5dbe9c5               // vpand    xmm2, xmm2, xmm5
	LONG $0xcbdff1c5               // vpandn    xmm1, xmm1, xmm3
	LONG $0xc0d4f1c5               // vpaddq    xmm0, xmm1, xmm0
	LONG $0xc0d4e9c5               // vpaddq    xmm0, xmm2, xmm0
	LONG $0x44d6f9c5; WORD $0x20cf // vmovq    qword [rdi + 8*rcx + 32], xmm0
	QUAD $0x0120ce4416f9e3c4       // vpextrq    qword [rsi + 8*rcx + 32], xmm0, 1
	LONG $0x447efac5; WORD $0x28ce // vmovq    xmm0, qword [rsi + 8*rcx + 40]
	LONG $0x4c7efac5; WORD $0x28cf // vmovq    xmm1, qword [rdi + 8*rcx + 40]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xc6d4f9c5               // vpaddq    xmm0, xmm0, xmm6
	LONG $0xd773f1c5; BYTE $0x1d   // vpsrlq    xmm1, xmm7, 29
	LONG $0xc0d4f1c5               // vpaddq    xmm0, xmm1, xmm0
	LONG $0x44d6f9c5; WORD $0x28cf // vmovq    qword [rdi + 8*rcx + 40], xmm0
	QUAD $0x0128ce4416f9e3c4       // vpextrq    qword [rsi + 8*rcx + 40], xmm0, 1

LBB7_11:
	LONG $0x01c18348 // add    rcx, 1
	LONG $0x05f98348 // cmp    rcx, 5
	JE   LBB7_12

LBB7_1:
	LONG $0xcf048b48                           // mov    rax, qword [rdi + 8*rcx]
	LONG $0x04f98348                           // cmp    rcx, 4
	JNE  LBB7_3
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	LONG $0x00002548; WORD $0xe000             // and    rax, -536870912
	LONG $0xcf048948                           // mov    qword [rdi + 8*rcx], rax
	LONG $0xce048b48                           // mov    rax, qword [rsi + 8*rcx]
	WORD $0x8941; BYTE $0xc3                   // mov    r11d, eax
	LONG $0xffe38141; WORD $0xffff; BYTE $0x1f // and    r11d, 536870911
	LONG $0x00002548; WORD $0xe000             // and    rax, -536870912
	LONG $0xce048948                           // mov    qword [rsi + 8*rcx], rax
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JNE  LBB7_5
	JMP  LBB7_7

LBB7_3:
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x39eac148             // shr    rdx, 57
	LONG $0xcf540148; BYTE $0x08 // add    qword [rdi + 8*rcx + 8], rdx
	WORD $0x214c; BYTE $0xd0     // and    rax, r10
	LONG $0xce1c8b4c             // mov    r11, qword [rsi + 8*rcx]
	WORD $0x894c; BYTE $0xda     // mov    rdx, r11
	LONG $0x39eac148             // shr    rdx, 57
	LONG $0xce540148; BYTE $0x08 // add    qword [rsi + 8*rcx + 8], rdx
	WORD $0x214d; BYTE $0xd3     // and    r11, r10
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB7_7

LBB7_5:
	WORD $0x854d; BYTE $0xdb // test    r11, r11
	JNE  LBB7_6

LBB7_7:
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JE   LBB7_9
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x07e0c148                           // shl    rax, 7
	LONG $0x81728d4d                           // lea    r14, [r10 - 127]
	WORD $0x2149; BYTE $0xc6                   // and    r14, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x27e0c148                           // shl    rax, 39
	WORD $0x214c; BYTE $0xc0                   // and    rax, r8
	LONG $0x015a8d49                           // lea    rbx, [r10 + 1]
	WORD $0x094c; BYTE $0xf3                   // or    rbx, r14
	WORD $0x2948; BYTE $0xc3                   // sub    rbx, rax
	LONG $0xcf5c0148; BYTE $0x08               // add    qword [rdi + 8*rcx + 8], rbx
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x32e8c148                           // shr    rax, 50
	WORD $0x8948; BYTE $0xd3                   // mov    rbx, rdx
	LONG $0x12ebc148                           // shr    rbx, 18
	WORD $0x014c; BYTE $0xd0                   // add    rax, r10
	WORD $0x2948; BYTE $0xd8                   // sub    rax, rbx
	LONG $0xcf440148; BYTE $0x10               // add    qword [rdi + 8*rcx + 16], rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x35e0c148                           // shl    rax, 53
	WORD $0x214c; BYTE $0xc8                   // and    rax, r9
	WORD $0x314c; BYTE $0xd0                   // xor    rax, r10
	LONG $0xcf440148; BYTE $0x18               // add    qword [rdi + 8*rcx + 24], rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x04e8c148                           // shr    rax, 4
	WORD $0x8948; BYTE $0xd3                   // mov    rbx, rdx
	LONG $0x1ce3c148                           // shl    rbx, 28
	LONG $0x01b28d4d; WORD $0x0000; BYTE $0xf0 // lea    r14, [r10 - 268435455]
	WORD $0x2149; BYTE $0xde                   // and    r14, rbx
	WORD $0x314c; BYTE $0xd0                   // xor    rax, r10
	WORD $0x014c; BYTE $0xf0                   // add    rax, r14
	LONG $0xcf440148; BYTE $0x20               // add    qword [rdi + 8*rcx + 32], rax
	LONG $0xcf448b48; BYTE $0x28               // mov    rax, qword [rdi + 8*rcx + 40]
	LONG $0x1deac148                           // shr    rdx, 29
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0xffc08348                           // add    rax, -1
	LONG $0xcf448948; BYTE $0x28               // mov    qword [rdi + 8*rcx + 40], rax

LBB7_9:
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JE   LBB7_11
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x07e0c148                           // shl    rax, 7
	LONG $0x81528d49                           // lea    rdx, [r10 - 127]
	WORD $0x2148; BYTE $0xc2                   // and    rdx, rax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x27e0c148                           // shl    rax, 39
	WORD $0x214c; BYTE $0xc0                   // and    rax, r8
	LONG $0x015a8d49                           // lea    rbx, [r10 + 1]
	WORD $0x0948; BYTE $0xd3                   // or    rbx, rdx
	WORD $0x2948; BYTE $0xc3                   // sub    rbx, rax
	LONG $0xce5c0148; BYTE $0x08               // add    qword [rsi + 8*rcx + 8], rbx
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x32e8c148                           // shr    rax, 50
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x12eac148                           // shr    rdx, 18
	WORD $0x014c; BYTE $0xd0                   // add    rax, r10
	WORD $0x2948; BYTE $0xd0                   // sub    rax, rdx
	LONG $0xce440148; BYTE $0x10               // add    qword [rsi + 8*rcx + 16], rax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x35e0c148                           // shl    rax, 53
	WORD $0x214c; BYTE $0xc8                   // and    rax, r9
	WORD $0x314c; BYTE $0xd0                   // xor    rax, r10
	LONG $0xce440148; BYTE $0x18               // add    qword [rsi + 8*rcx + 24], rax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x04e8c148                           // shr    rax, 4
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x1ce2c148                           // shl    rdx, 28
	LONG $0x019a8d49; WORD $0x0000; BYTE $0xf0 // lea    rbx, [r10 - 268435455]
	WORD $0x2148; BYTE $0xd3                   // and    rbx, rdx
	WORD $0x314c; BYTE $0xd0                   // xor    rax, r10
	WORD $0x0148; BYTE $0xd8                   // add    rax, rbx
	LONG $0xce440148; BYTE $0x20               // add    qword [rsi + 8*rcx + 32], rax
	LONG $0xce448b48; BYTE $0x28               // mov    rax, qword [rsi + 8*rcx + 40]
	LONG $0x1debc149                           // shr    r11, 29
	WORD $0x014c; BYTE $0xd8                   // add    rax, r11
	LONG $0xffc08348                           // add    rax, -1
	LONG $0xce448948; BYTE $0x28               // mov    qword [rsi + 8*rcx + 40], rax
	JMP  LBB7_11

LBB7_12:
	LONG $0x487f8348; BYTE $0xff // cmp    qword [rdi + 72], -1
	JE   LBB7_13
	LONG $0x487e8348; BYTE $0xff // cmp    qword [rsi + 72], -1
	JE   LBB7_15

LBB7_16:
	RET

LBB7_13:
	QUAD $0x000000004847c748               // mov    qword [rdi + 72], 0
	QUAD $0x000000000000b848; WORD $0xfe00 // mov    rax, -144115188075855872
	LONG $0x40470148                       // add    qword [rdi + 64], rax
	LONG $0x487e8348; BYTE $0xff           // cmp    qword [rsi + 72], -1
	JNE  LBB7_16

LBB7_15:
	QUAD $0x000000004846c748               // mov    qword [rsi + 72], 0
	QUAD $0x000000000000b848; WORD $0xfe00 // mov    rax, -144115188075855872
	LONG $0x40460148                       // add    qword [rsi + 64], rax
	JMP  LBB7_16

DATA LCDATA3<>+0x000(SB)/8, $0x0000000010000000
DATA LCDATA3<>+0x008(SB)/8, $0x0000000010000000
DATA LCDATA3<>+0x010(SB)/8, $0x000000001fffffff
DATA LCDATA3<>+0x018(SB)/8, $0x000000001fffffff
DATA LCDATA3<>+0x020(SB)/8, $0x000000000fffffff
DATA LCDATA3<>+0x028(SB)/8, $0x000000000fffffff
GLOBL LCDATA3<>(SB), 8, $48

TEXT 路_sm2P256DivideByR_2way(SB), $0-40

	MOVQ a+0(FP), DI
	MOVQ a2+8(FP), SI
	MOVQ tmp+16(FP), DX
	MOVQ tmp2+24(FP), CX
	LEAQ LCDATA3<>(SB), BP

	LONG $0x417efac5; BYTE $0x20   // vmovq    xmm0, qword [rcx + 32]
	LONG $0x4a7efac5; BYTE $0x20   // vmovq    xmm1, qword [rdx + 32]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x497efac5; BYTE $0x28   // vmovq    xmm1, qword [rcx + 40]
	LONG $0x527efac5; BYTE $0x28   // vmovq    xmm2, qword [rdx + 40]
	LONG $0xe16ce9c5               // vpunpcklqdq    xmm4, xmm2, xmm1
	LONG $0xd073f1c5; BYTE $0x1d   // vpsrlq    xmm1, xmm0, 29
	LONG $0xc0eff9c5               // vpxor    xmm0, xmm0, xmm0
	LONG $0x0271e3c4; WORD $0x0ad0 // vpblendd    xmm2, xmm1, xmm0, 10
	LONG $0xf473e1c5; BYTE $0x1c   // vpsllq    xmm3, xmm4, 28
	LONG $0x4d6ff9c5; BYTE $0x00   // vmovdqa    xmm1, oword 0[rbp] /* [rip + .LCPI8_0] */
	LONG $0xd9dbe1c5               // vpand    xmm3, xmm3, xmm1
	LONG $0xdad4e1c5               // vpaddq    xmm3, xmm3, xmm2
	LONG $0x556ff9c5; BYTE $0x10   // vmovdqa    xmm2, oword 16[rbp] /* [rip + .LCPI8_1] */
	LONG $0xeadbe1c5               // vpand    xmm5, xmm3, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x0789                   // mov    dword [rdi], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0xd373d1c5; BYTE $0x1d   // vpsrlq    xmm5, xmm3, 29
	WORD $0x0689                   // mov    dword [rsi], eax
	LONG $0xd473c9c5; BYTE $0x01   // vpsrlq    xmm6, xmm4, 1
	LONG $0x5d6ff9c5; BYTE $0x20   // vmovdqa    xmm3, oword 32[rbp] /* [rip + .LCPI8_2] */
	LONG $0xf3dbc9c5               // vpand    xmm6, xmm6, xmm3
	LONG $0xeed4d1c5               // vpaddq    xmm5, xmm5, xmm6
	LONG $0xd573c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm5, 28
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x04       // mov    dword [rdi + 4], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x04       // mov    dword [rsi + 4], eax
	LONG $0x697efac5; BYTE $0x30   // vmovq    xmm5, qword [rcx + 48]
	LONG $0x7a7efac5; BYTE $0x30   // vmovq    xmm7, qword [rdx + 48]
	LONG $0xed6cc1c5               // vpunpcklqdq    xmm5, xmm7, xmm5
	LONG $0xd473d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm4, 29
	LONG $0x0259e3c4; WORD $0x0ae0 // vpblendd    xmm4, xmm4, xmm0, 10
	LONG $0xf573c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm5, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xe7d4d9c5               // vpaddq    xmm4, xmm4, xmm7
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm4, 29
	LONG $0xe2dbd9c5               // vpand    xmm4, xmm4, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x08       // mov    dword [rdi + 8], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x08       // mov    dword [rsi + 8], eax
	LONG $0xd573d9c5; BYTE $0x01   // vpsrlq    xmm4, xmm5, 1
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm4, 28
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x0c       // mov    dword [rdi + 12], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x0c       // mov    dword [rsi + 12], eax
	LONG $0x617efac5; BYTE $0x38   // vmovq    xmm4, qword [rcx + 56]
	LONG $0x7a7efac5; BYTE $0x38   // vmovq    xmm7, qword [rdx + 56]
	LONG $0xe46cc1c5               // vpunpcklqdq    xmm4, xmm7, xmm4
	LONG $0xd573d1c5; BYTE $0x1d   // vpsrlq    xmm5, xmm5, 29
	LONG $0x0251e3c4; WORD $0x0ae8 // vpblendd    xmm5, xmm5, xmm0, 10
	LONG $0xf473c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm4, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xefd4d1c5               // vpaddq    xmm5, xmm5, xmm7
	LONG $0xedd4c9c5               // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd573c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm5, 29
	LONG $0xeadbd1c5               // vpand    xmm5, xmm5, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x10       // mov    dword [rdi + 16], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x10       // mov    dword [rsi + 16], eax
	LONG $0xd473d1c5; BYTE $0x01   // vpsrlq    xmm5, xmm4, 1
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0xedd4c9c5               // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd573c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm5, 28
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x14       // mov    dword [rdi + 20], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x14       // mov    dword [rsi + 20], eax
	LONG $0x697efac5; BYTE $0x40   // vmovq    xmm5, qword [rcx + 64]
	LONG $0x7a7efac5; BYTE $0x40   // vmovq    xmm7, qword [rdx + 64]
	LONG $0xed6cc1c5               // vpunpcklqdq    xmm5, xmm7, xmm5
	LONG $0xd473d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm4, 29
	LONG $0x0259e3c4; WORD $0x0ae0 // vpblendd    xmm4, xmm4, xmm0, 10
	LONG $0xf573c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm5, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xe7d4d9c5               // vpaddq    xmm4, xmm4, xmm7
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm4, 29
	LONG $0xe2dbd9c5               // vpand    xmm4, xmm4, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x18       // mov    dword [rdi + 24], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x18       // mov    dword [rsi + 24], eax
	LONG $0xd573d9c5; BYTE $0x01   // vpsrlq    xmm4, xmm5, 1
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm4, 28
	LONG $0xdbdbd9c5               // vpand    xmm3, xmm4, xmm3
	LONG $0x7ef9e1c4; BYTE $0xd8   // vmovq    rax, xmm3
	WORD $0x4789; BYTE $0x1c       // mov    dword [rdi + 28], eax
	LONG $0x16f9e3c4; WORD $0x01d8 // vpextrq    rax, xmm3, 1
	WORD $0x4689; BYTE $0x1c       // mov    dword [rsi + 28], eax
	LONG $0x597efac5; BYTE $0x48   // vmovq    xmm3, qword [rcx + 72]
	LONG $0x627efac5; BYTE $0x48   // vmovq    xmm4, qword [rdx + 72]
	LONG $0xdb6cd9c5               // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0xd573d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm5, 29
	LONG $0x0259e3c4; WORD $0x0ac0 // vpblendd    xmm0, xmm4, xmm0, 10
	LONG $0xf373e1c5; BYTE $0x1c   // vpsllq    xmm3, xmm3, 28
	LONG $0xc9dbe1c5               // vpand    xmm1, xmm3, xmm1
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc0d4c9c5               // vpaddq    xmm0, xmm6, xmm0
	LONG $0xd073f1c5; BYTE $0x1d   // vpsrlq    xmm1, xmm0, 29
	LONG $0xc2dbf9c5               // vpand    xmm0, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x4789; BYTE $0x20       // mov    dword [rdi + 32], eax
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	WORD $0x4689; BYTE $0x20       // mov    dword [rsi + 32], eax
	LONG $0x7ef9e1c4; BYTE $0xc9   // vmovq    rcx, xmm1
	LONG $0x16f9e3c4; WORD $0x01c8 // vpextrq    rax, xmm1, 1
	LONG $0x20e0c148               // shl    rax, 32
	WORD $0x0948; BYTE $0xc8       // or    rax, rcx
	MOVQ AX, uint64+32(FP)
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x01ffffffe0000000
DATA LCDATA4<>+0x008(SB)/8, $0x01ffffffe0000000
DATA LCDATA4<>+0x010(SB)/8, $0x01ffffffffffffff
DATA LCDATA4<>+0x018(SB)/8, $0x01ffffffffffffff
GLOBL LCDATA4<>(SB), 8, $32

TEXT 路_sm2P256FromLargeElement_2Way(SB), $0-32

	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ a2+16(FP), DX
	MOVQ b2+24(FP), CX
	LEAQ LCDATA4<>(SB), BP

	LONG $0x017efac5                           // vmovq    xmm0, qword [rcx]
	LONG $0x0e7efac5                           // vmovq    xmm1, qword [rsi]
	LONG $0xc86cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm0
	LONG $0x417efac5; BYTE $0x08               // vmovq    xmm0, qword [rcx + 8]
	LONG $0x567efac5; BYTE $0x08               // vmovq    xmm2, qword [rsi + 8]
	LONG $0xd06ce9c5                           // vpunpcklqdq    xmm2, xmm2, xmm0
	LONG $0xf273e1c5; BYTE $0x1d               // vpsllq    xmm3, xmm2, 29
	LONG $0x456ff9c5; BYTE $0x00               // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI9_0] */
	LONG $0xd8dbe1c5                           // vpand    xmm3, xmm3, xmm0
	LONG $0xd9d4e1c5                           // vpaddq    xmm3, xmm3, xmm1
	LONG $0xe372d9c5; BYTE $0x1f               // vpsrad    xmm4, xmm3, 31
	LONG $0x4d6ff9c5; BYTE $0x10               // vmovdqa    xmm1, oword 16[rbp] /* [rip + .LCPI9_1] */
	LONG $0xe9dbe1c5                           // vpand    xmm5, xmm3, xmm1
	LONG $0x2fd6f9c5                           // vmovq    qword [rdi], xmm5
	LONG $0x16f9e3c4; WORD $0x012a             // vpextrq    qword [rdx], xmm5, 1
	LONG $0xe372e1c5; BYTE $0x19               // vpsrad    xmm3, xmm3, 25
	LONG $0xdb70f9c5; BYTE $0xf5               // vpshufd    xmm3, xmm3, 245
	LONG $0x0261e3c4; WORD $0x0adc             // vpblendd    xmm3, xmm3, xmm4, 10
	LONG $0x617efac5; BYTE $0x10               // vmovq    xmm4, qword [rcx + 16]
	LONG $0x6e7efac5; BYTE $0x10               // vmovq    xmm5, qword [rsi + 16]
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x697efac5; BYTE $0x18               // vmovq    xmm5, qword [rcx + 24]
	LONG $0x767efac5; BYTE $0x18               // vmovq    xmm6, qword [rsi + 24]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe272c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm2, 28
	LONG $0xd273e9c5; BYTE $0x1c               // vpsrlq    xmm2, xmm2, 28
	LONG $0x0269e3c4; WORD $0x0ad6             // vpblendd    xmm2, xmm2, xmm6, 10
	LONG $0xd4d4e9c5                           // vpaddq    xmm2, xmm2, xmm4
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe0dbd9c5                           // vpand    xmm4, xmm4, xmm0
	LONG $0xd4d4e9c5                           // vpaddq    xmm2, xmm2, xmm4
	LONG $0xd2d4e1c5                           // vpaddq    xmm2, xmm3, xmm2
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe1dbe9c5                           // vpand    xmm4, xmm2, xmm1
	LONG $0x67d6f9c5; BYTE $0x08               // vmovq    qword [rdi + 8], xmm4
	LONG $0x16f9e3c4; WORD $0x0862; BYTE $0x01 // vpextrq    qword [rdx + 8], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x20               // vmovq    xmm3, qword [rcx + 32]
	LONG $0x667efac5; BYTE $0x20               // vmovq    xmm4, qword [rsi + 32]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x28               // vmovq    xmm4, qword [rcx + 40]
	LONG $0x767efac5; BYTE $0x28               // vmovq    xmm6, qword [rsi + 40]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe8dbd1c5                           // vpand    xmm5, xmm5, xmm0
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe9dbe9c5                           // vpand    xmm5, xmm2, xmm1
	LONG $0x6fd6f9c5; BYTE $0x10               // vmovq    qword [rdi + 16], xmm5
	LONG $0x16f9e3c4; WORD $0x106a; BYTE $0x01 // vpextrq    qword [rdx + 16], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x30               // vmovq    xmm3, qword [rcx + 48]
	LONG $0x6e7efac5; BYTE $0x30               // vmovq    xmm5, qword [rsi + 48]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x38               // vmovq    xmm5, qword [rcx + 56]
	LONG $0x767efac5; BYTE $0x38               // vmovq    xmm6, qword [rsi + 56]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe0dbd9c5                           // vpand    xmm4, xmm4, xmm0
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe1dbe9c5                           // vpand    xmm4, xmm2, xmm1
	LONG $0x67d6f9c5; BYTE $0x18               // vmovq    qword [rdi + 24], xmm4
	LONG $0x16f9e3c4; WORD $0x1862; BYTE $0x01 // vpextrq    qword [rdx + 24], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x40               // vmovq    xmm3, qword [rcx + 64]
	LONG $0x667efac5; BYTE $0x40               // vmovq    xmm4, qword [rsi + 64]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x48               // vmovq    xmm4, qword [rcx + 72]
	LONG $0x767efac5; BYTE $0x48               // vmovq    xmm6, qword [rsi + 72]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe8dbd1c5                           // vpand    xmm5, xmm5, xmm0
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe9dbe9c5                           // vpand    xmm5, xmm2, xmm1
	LONG $0x6fd6f9c5; BYTE $0x20               // vmovq    qword [rdi + 32], xmm5
	LONG $0x16f9e3c4; WORD $0x206a; BYTE $0x01 // vpextrq    qword [rdx + 32], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x50               // vmovq    xmm3, qword [rcx + 80]
	LONG $0x6e7efac5; BYTE $0x50               // vmovq    xmm5, qword [rsi + 80]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x58               // vmovq    xmm5, qword [rcx + 88]
	LONG $0x767efac5; BYTE $0x58               // vmovq    xmm6, qword [rsi + 88]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe0dbd9c5                           // vpand    xmm4, xmm4, xmm0
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe1dbe9c5                           // vpand    xmm4, xmm2, xmm1
	LONG $0x67d6f9c5; BYTE $0x28               // vmovq    qword [rdi + 40], xmm4
	LONG $0x16f9e3c4; WORD $0x2862; BYTE $0x01 // vpextrq    qword [rdx + 40], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x60               // vmovq    xmm3, qword [rcx + 96]
	LONG $0x667efac5; BYTE $0x60               // vmovq    xmm4, qword [rsi + 96]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x68               // vmovq    xmm4, qword [rcx + 104]
	LONG $0x767efac5; BYTE $0x68               // vmovq    xmm6, qword [rsi + 104]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe8dbd1c5                           // vpand    xmm5, xmm5, xmm0
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe9dbe9c5                           // vpand    xmm5, xmm2, xmm1
	LONG $0x6fd6f9c5; BYTE $0x30               // vmovq    qword [rdi + 48], xmm5
	LONG $0x16f9e3c4; WORD $0x306a; BYTE $0x01 // vpextrq    qword [rdx + 48], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x70               // vmovq    xmm3, qword [rcx + 112]
	LONG $0x6e7efac5; BYTE $0x70               // vmovq    xmm5, qword [rsi + 112]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x78               // vmovq    xmm5, qword [rcx + 120]
	LONG $0x767efac5; BYTE $0x78               // vmovq    xmm6, qword [rsi + 120]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xc0dbd9c5                           // vpand    xmm0, xmm4, xmm0
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0xe072e9c5; BYTE $0x1f               // vpsrad    xmm2, xmm0, 31
	LONG $0xc9dbf9c5                           // vpand    xmm1, xmm0, xmm1
	LONG $0x4fd6f9c5; BYTE $0x38               // vmovq    qword [rdi + 56], xmm1
	LONG $0x16f9e3c4; WORD $0x384a; BYTE $0x01 // vpextrq    qword [rdx + 56], xmm1, 1
	LONG $0xe072f9c5; BYTE $0x19               // vpsrad    xmm0, xmm0, 25
	LONG $0xc070f9c5; BYTE $0xf5               // vpshufd    xmm0, xmm0, 245
	LONG $0x0279e3c4; WORD $0x0ac2             // vpblendd    xmm0, xmm0, xmm2, 10
	QUAD $0x00000080897efac5                   // vmovq    xmm1, qword [rcx + 128]
	QUAD $0x00000080967efac5                   // vmovq    xmm2, qword [rsi + 128]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xe572e9c5; BYTE $0x1c               // vpsrad    xmm2, xmm5, 28
	LONG $0xd573e1c5; BYTE $0x1c               // vpsrlq    xmm3, xmm5, 28
	LONG $0x0261e3c4; WORD $0x0ad2             // vpblendd    xmm2, xmm3, xmm2, 10
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xc1d4f9c5                           // vpaddq    xmm0, xmm0, xmm1
	LONG $0x47d6f9c5; BYTE $0x40               // vmovq    qword [rdi + 64], xmm0
	LONG $0x16f9e3c4; WORD $0x4042; BYTE $0x01 // vpextrq    qword [rdx + 64], xmm0, 1
	QUAD $0x000000004847c748                   // mov    qword [rdi + 72], 0
	QUAD $0x000000004842c748                   // mov    qword [rdx + 72], 0
	RET

DATA LCDATA5<>+0x000(SB)/8, $0x01ffffffe0000000
DATA LCDATA5<>+0x008(SB)/8, $0x01ffffffe0000000
DATA LCDATA5<>+0x010(SB)/8, $0x01ffffffffffffff
DATA LCDATA5<>+0x018(SB)/8, $0x01ffffffffffffff
DATA LCDATA5<>+0x020(SB)/8, $0x01ffffffffffff80
DATA LCDATA5<>+0x028(SB)/8, $0x01ffffffffffff80
DATA LCDATA5<>+0x030(SB)/8, $0x01ffff8000000000
DATA LCDATA5<>+0x038(SB)/8, $0x01ffff8000000000
DATA LCDATA5<>+0x040(SB)/8, $0x0200000000000000
DATA LCDATA5<>+0x048(SB)/8, $0x0200000000000000
DATA LCDATA5<>+0x050(SB)/8, $0x01e0000000000000
DATA LCDATA5<>+0x058(SB)/8, $0x01e0000000000000
DATA LCDATA5<>+0x060(SB)/8, $0x01fffffff0000000
DATA LCDATA5<>+0x068(SB)/8, $0x01fffffff0000000
DATA LCDATA5<>+0x070(SB)/8, $0x0000000010000000
DATA LCDATA5<>+0x078(SB)/8, $0x0000000010000000
DATA LCDATA5<>+0x080(SB)/8, $0x000000001fffffff
DATA LCDATA5<>+0x088(SB)/8, $0x000000001fffffff
DATA LCDATA5<>+0x090(SB)/8, $0x000000000fffffff
DATA LCDATA5<>+0x098(SB)/8, $0x000000000fffffff
GLOBL LCDATA5<>(SB), 8, $160

TEXT 路_sm2ReduceDegree_2way(SB), $0-56

	MOVQ a+0(FP), DI
	MOVQ a2+8(FP), SI
	MOVQ b+16(FP), DX
	MOVQ b2+24(FP), CX
	MOVQ tmp+32(FP), R8
	MOVQ tmp2+40(FP), R9
	LEAQ LCDATA5<>(SB), BP

	LONG $0x017efac5                           // vmovq    xmm0, qword [rcx]
	LONG $0x0a7efac5                           // vmovq    xmm1, qword [rdx]
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x497efac5; BYTE $0x08               // vmovq    xmm1, qword [rcx + 8]
	LONG $0x527efac5; BYTE $0x08               // vmovq    xmm2, qword [rdx + 8]
	LONG $0xd16ce9c5                           // vpunpcklqdq    xmm2, xmm2, xmm1
	LONG $0xf273e1c5; BYTE $0x1d               // vpsllq    xmm3, xmm2, 29
	LONG $0x4d6ff9c5; BYTE $0x00               // vmovdqa    xmm1, oword 0[rbp] /* [rip + .LCPI10_0] */
	LONG $0xd9dbe1c5                           // vpand    xmm3, xmm3, xmm1
	LONG $0xd8d4e1c5                           // vpaddq    xmm3, xmm3, xmm0
	LONG $0xe372d9c5; BYTE $0x1f               // vpsrad    xmm4, xmm3, 31
	LONG $0x456ff9c5; BYTE $0x10               // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI10_1] */
	LONG $0xe8dbe1c5                           // vpand    xmm5, xmm3, xmm0
	LONG $0xd679c1c4; BYTE $0x28               // vmovq    qword [r8], xmm5
	LONG $0x16f9c3c4; WORD $0x0129             // vpextrq    qword [r9], xmm5, 1
	LONG $0xe372e1c5; BYTE $0x19               // vpsrad    xmm3, xmm3, 25
	LONG $0xdb70f9c5; BYTE $0xf5               // vpshufd    xmm3, xmm3, 245
	LONG $0x0261e3c4; WORD $0x0adc             // vpblendd    xmm3, xmm3, xmm4, 10
	LONG $0x617efac5; BYTE $0x10               // vmovq    xmm4, qword [rcx + 16]
	LONG $0x6a7efac5; BYTE $0x10               // vmovq    xmm5, qword [rdx + 16]
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x697efac5; BYTE $0x18               // vmovq    xmm5, qword [rcx + 24]
	LONG $0x727efac5; BYTE $0x18               // vmovq    xmm6, qword [rdx + 24]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe272c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm2, 28
	LONG $0xd273e9c5; BYTE $0x1c               // vpsrlq    xmm2, xmm2, 28
	LONG $0x0269e3c4; WORD $0x0ad6             // vpblendd    xmm2, xmm2, xmm6, 10
	LONG $0xd4d4e9c5                           // vpaddq    xmm2, xmm2, xmm4
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe1dbd9c5                           // vpand    xmm4, xmm4, xmm1
	LONG $0xd4d4e9c5                           // vpaddq    xmm2, xmm2, xmm4
	LONG $0xd2d4e1c5                           // vpaddq    xmm2, xmm3, xmm2
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe0dbe9c5                           // vpand    xmm4, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x0860             // vmovq    qword [r8 + 8], xmm4
	LONG $0x16f9c3c4; WORD $0x0861; BYTE $0x01 // vpextrq    qword [r9 + 8], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x20               // vmovq    xmm3, qword [rcx + 32]
	LONG $0x627efac5; BYTE $0x20               // vmovq    xmm4, qword [rdx + 32]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x28               // vmovq    xmm4, qword [rcx + 40]
	LONG $0x727efac5; BYTE $0x28               // vmovq    xmm6, qword [rdx + 40]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe9dbd1c5                           // vpand    xmm5, xmm5, xmm1
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe8dbe9c5                           // vpand    xmm5, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x1068             // vmovq    qword [r8 + 16], xmm5
	LONG $0x16f9c3c4; WORD $0x1069; BYTE $0x01 // vpextrq    qword [r9 + 16], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x30               // vmovq    xmm3, qword [rcx + 48]
	LONG $0x6a7efac5; BYTE $0x30               // vmovq    xmm5, qword [rdx + 48]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x38               // vmovq    xmm5, qword [rcx + 56]
	LONG $0x727efac5; BYTE $0x38               // vmovq    xmm6, qword [rdx + 56]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe1dbd9c5                           // vpand    xmm4, xmm4, xmm1
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe0dbe9c5                           // vpand    xmm4, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x1860             // vmovq    qword [r8 + 24], xmm4
	LONG $0x16f9c3c4; WORD $0x1861; BYTE $0x01 // vpextrq    qword [r9 + 24], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x40               // vmovq    xmm3, qword [rcx + 64]
	LONG $0x627efac5; BYTE $0x40               // vmovq    xmm4, qword [rdx + 64]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x48               // vmovq    xmm4, qword [rcx + 72]
	LONG $0x727efac5; BYTE $0x48               // vmovq    xmm6, qword [rdx + 72]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe9dbd1c5                           // vpand    xmm5, xmm5, xmm1
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe8dbe9c5                           // vpand    xmm5, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x2068             // vmovq    qword [r8 + 32], xmm5
	LONG $0x16f9c3c4; WORD $0x2069; BYTE $0x01 // vpextrq    qword [r9 + 32], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x50               // vmovq    xmm3, qword [rcx + 80]
	LONG $0x6a7efac5; BYTE $0x50               // vmovq    xmm5, qword [rdx + 80]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x58               // vmovq    xmm5, qword [rcx + 88]
	LONG $0x727efac5; BYTE $0x58               // vmovq    xmm6, qword [rdx + 88]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xe1dbd9c5                           // vpand    xmm4, xmm4, xmm1
	LONG $0xdcd4e1c5                           // vpaddq    xmm3, xmm3, xmm4
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe0dbe9c5                           // vpand    xmm4, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x2860             // vmovq    qword [r8 + 40], xmm4
	LONG $0x16f9c3c4; WORD $0x2861; BYTE $0x01 // vpextrq    qword [r9 + 40], xmm4, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x60               // vmovq    xmm3, qword [rcx + 96]
	LONG $0x627efac5; BYTE $0x60               // vmovq    xmm4, qword [rdx + 96]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x617efac5; BYTE $0x68               // vmovq    xmm4, qword [rcx + 104]
	LONG $0x727efac5; BYTE $0x68               // vmovq    xmm6, qword [rdx + 104]
	LONG $0xe46cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm4
	LONG $0xe572c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm5, 28
	LONG $0xd573d1c5; BYTE $0x1c               // vpsrlq    xmm5, xmm5, 28
	LONG $0x0251e3c4; WORD $0x0aee             // vpblendd    xmm5, xmm5, xmm6, 10
	LONG $0xdbd4d1c5                           // vpaddq    xmm3, xmm5, xmm3
	LONG $0xf473d1c5; BYTE $0x1d               // vpsllq    xmm5, xmm4, 29
	LONG $0xe9dbd1c5                           // vpand    xmm5, xmm5, xmm1
	LONG $0xddd4e1c5                           // vpaddq    xmm3, xmm3, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xe272e1c5; BYTE $0x1f               // vpsrad    xmm3, xmm2, 31
	LONG $0xe8dbe9c5                           // vpand    xmm5, xmm2, xmm0
	LONG $0xd679c1c4; WORD $0x3068             // vmovq    qword [r8 + 48], xmm5
	LONG $0x16f9c3c4; WORD $0x3069; BYTE $0x01 // vpextrq    qword [r9 + 48], xmm5, 1
	LONG $0xe272e9c5; BYTE $0x19               // vpsrad    xmm2, xmm2, 25
	LONG $0xd270f9c5; BYTE $0xf5               // vpshufd    xmm2, xmm2, 245
	LONG $0x0269e3c4; WORD $0x0ad3             // vpblendd    xmm2, xmm2, xmm3, 10
	LONG $0x597efac5; BYTE $0x70               // vmovq    xmm3, qword [rcx + 112]
	LONG $0x6a7efac5; BYTE $0x70               // vmovq    xmm5, qword [rdx + 112]
	LONG $0xdb6cd1c5                           // vpunpcklqdq    xmm3, xmm5, xmm3
	LONG $0x697efac5; BYTE $0x78               // vmovq    xmm5, qword [rcx + 120]
	LONG $0x727efac5; BYTE $0x78               // vmovq    xmm6, qword [rdx + 120]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0xe472c9c5; BYTE $0x1c               // vpsrad    xmm6, xmm4, 28
	LONG $0xd473d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm4, 28
	LONG $0x0259e3c4; WORD $0x0ae6             // vpblendd    xmm4, xmm4, xmm6, 10
	LONG $0xdbd4d9c5                           // vpaddq    xmm3, xmm4, xmm3
	LONG $0xf573d9c5; BYTE $0x1d               // vpsllq    xmm4, xmm5, 29
	LONG $0xc9dbd9c5                           // vpand    xmm1, xmm4, xmm1
	LONG $0xc9d4e1c5                           // vpaddq    xmm1, xmm3, xmm1
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xe172e9c5; BYTE $0x1f               // vpsrad    xmm2, xmm1, 31
	LONG $0xd8dbf1c5                           // vpand    xmm3, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0x3858             // vmovq    qword [r8 + 56], xmm3
	LONG $0x16f9c3c4; WORD $0x3859; BYTE $0x01 // vpextrq    qword [r9 + 56], xmm3, 1
	LONG $0xe172f1c5; BYTE $0x19               // vpsrad    xmm1, xmm1, 25
	LONG $0xc970f9c5; BYTE $0xf5               // vpshufd    xmm1, xmm1, 245
	LONG $0x0271e3c4; WORD $0x0aca             // vpblendd    xmm1, xmm1, xmm2, 10
	QUAD $0x00000080917efac5                   // vmovq    xmm2, qword [rcx + 128]
	QUAD $0x000000809a7efac5                   // vmovq    xmm3, qword [rdx + 128]
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0xe572e1c5; BYTE $0x1c               // vpsrad    xmm3, xmm5, 28
	LONG $0xd573d9c5; BYTE $0x1c               // vpsrlq    xmm4, xmm5, 28
	LONG $0x0259e3c4; WORD $0x0adb             // vpblendd    xmm3, xmm4, xmm3, 10
	LONG $0xd2d4e1c5                           // vpaddq    xmm2, xmm3, xmm2
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x4048             // vmovq    qword [r8 + 64], xmm1
	LONG $0x16f9c3c4; WORD $0x4049; BYTE $0x01 // vpextrq    qword [r9 + 64], xmm1, 1
	QUAD $0xffffffffffffbe49; WORD $0x01ff     // mov    r14, 144115188075855871
	QUAD $0xff8000000000ba49; WORD $0x01ff     // mov    r10, 144114638320041984
	QUAD $0x000000000000bb49; WORD $0x01e0     // mov    r11, 135107988821114880
	QUAD $0x000000004840c749                   // mov    qword [r8 + 72], 0
	QUAD $0x000000004841c749                   // mov    qword [r9 + 72], 0
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x456f79c5; BYTE $0x20               // vmovdqa    xmm8, oword 32[rbp] /* [rip + .LCPI10_2] */
	LONG $0x4d6f79c5; BYTE $0x30               // vmovdqa    xmm9, oword 48[rbp] /* [rip + .LCPI10_3] */
	LONG $0x556f79c5; BYTE $0x40               // vmovdqa    xmm10, oword 64[rbp] /* [rip + .LCPI10_4] */
	LONG $0x656ff9c5; BYTE $0x50               // vmovdqa    xmm4, oword 80[rbp] /* [rip + .LCPI10_5] */
	LONG $0x6d6ff9c5; BYTE $0x60               // vmovdqa    xmm5, oword 96[rbp] /* [rip + .LCPI10_6] */
	LONG $0xf676c9c5                           // vpcmpeqd    xmm6, xmm6, xmm6
	JMP  LBB10_1

LBB10_6:
	LONG $0x6ef9c1c4; BYTE $0xfc               // vmovq    xmm7, r12
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xff6cf1c5                           // vpunpcklqdq    xmm7, xmm1, xmm7
	LONG $0x7e7ac1c4; WORD $0xc94c; BYTE $0x08 // vmovq    xmm1, qword [r9 + 8*rcx + 8]
	LONG $0x7e7ac1c4; WORD $0xc854; BYTE $0x08 // vmovq    xmm2, qword [r8 + 8*rcx + 8]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xf773e9c5; BYTE $0x07               // vpsllq    xmm2, xmm7, 7
	LONG $0xd2dbb9c5                           // vpand    xmm2, xmm8, xmm2
	LONG $0xd2eba9c5                           // vpor    xmm2, xmm10, xmm2
	LONG $0xf773e1c5; BYTE $0x27               // vpsllq    xmm3, xmm7, 39
	LONG $0xdbdbb1c5                           // vpand    xmm3, xmm9, xmm3
	LONG $0xd3fbe9c5                           // vpsubq    xmm2, xmm2, xmm3
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	QUAD $0x0108c94c16f9c3c4                   // vpextrq    qword [r9 + 8*rcx + 8], xmm1, 1
	LONG $0x7e7ac1c4; WORD $0xc94c; BYTE $0x10 // vmovq    xmm1, qword [r9 + 8*rcx + 16]
	LONG $0x7e7ac1c4; WORD $0xc854; BYTE $0x10 // vmovq    xmm2, qword [r8 + 8*rcx + 16]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd773e9c5; BYTE $0x32               // vpsrlq    xmm2, xmm7, 50
	LONG $0xd773e1c5; BYTE $0x12               // vpsrlq    xmm3, xmm7, 18
	LONG $0xd3fbe9c5                           // vpsubq    xmm2, xmm2, xmm3
	LONG $0xc8d4f1c5                           // vpaddq    xmm1, xmm1, xmm0
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	QUAD $0x0110c94c16f9c3c4                   // vpextrq    qword [r9 + 8*rcx + 16], xmm1, 1
	LONG $0x7e7ac1c4; WORD $0xc94c; BYTE $0x18 // vmovq    xmm1, qword [r9 + 8*rcx + 24]
	LONG $0x7e7ac1c4; WORD $0xc854; BYTE $0x18 // vmovq    xmm2, qword [r8 + 8*rcx + 24]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xf773e9c5; BYTE $0x35               // vpsllq    xmm2, xmm7, 53
	LONG $0xd4dbe9c5                           // vpand    xmm2, xmm2, xmm4
	LONG $0xd0efe9c5                           // vpxor    xmm2, xmm2, xmm0
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	QUAD $0x0118c94c16f9c3c4                   // vpextrq    qword [r9 + 8*rcx + 24], xmm1, 1
	LONG $0x7e7ac1c4; WORD $0xc94c; BYTE $0x20 // vmovq    xmm1, qword [r9 + 8*rcx + 32]
	LONG $0x7e7ac1c4; WORD $0xc854; BYTE $0x20 // vmovq    xmm2, qword [r8 + 8*rcx + 32]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xd773e9c5; BYTE $0x04               // vpsrlq    xmm2, xmm7, 4
	LONG $0xf773e1c5; BYTE $0x1c               // vpsllq    xmm3, xmm7, 28
	LONG $0xdddbe1c5                           // vpand    xmm3, xmm3, xmm5
	LONG $0xd0dfe9c5                           // vpandn    xmm2, xmm2, xmm0
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xc9d4e1c5                           // vpaddq    xmm1, xmm3, xmm1
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x20 // vmovq    qword [r8 + 8*rcx + 32], xmm1
	QUAD $0x0120c94c16f9c3c4                   // vpextrq    qword [r9 + 8*rcx + 32], xmm1, 1
	LONG $0x7e7ac1c4; WORD $0xc94c; BYTE $0x28 // vmovq    xmm1, qword [r9 + 8*rcx + 40]
	LONG $0x7e7ac1c4; WORD $0xc854; BYTE $0x28 // vmovq    xmm2, qword [r8 + 8*rcx + 40]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0xced4f1c5                           // vpaddq    xmm1, xmm1, xmm6
	LONG $0xd773e9c5; BYTE $0x1d               // vpsrlq    xmm2, xmm7, 29
	LONG $0xc9d4e9c5                           // vpaddq    xmm1, xmm2, xmm1
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x28 // vmovq    qword [r8 + 8*rcx + 40], xmm1
	QUAD $0x0128c94c16f9c3c4                   // vpextrq    qword [r9 + 8*rcx + 40], xmm1, 1

LBB10_11:
	LONG $0x01c18348 // add    rcx, 1
	LONG $0x05f98348 // cmp    rcx, 5
	JE   LBB10_12

LBB10_1:
	LONG $0xc81c8b49                           // mov    rbx, qword [r8 + 8*rcx]
	LONG $0x04f98348                           // cmp    rcx, 4
	JNE  LBB10_3
	WORD $0xd889                               // mov    eax, ebx
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	LONG $0x00e38148; WORD $0x0000; BYTE $0xe0 // and    rbx, -536870912
	LONG $0xc81c8949                           // mov    qword [r8 + 8*rcx], rbx
	LONG $0xc91c8b49                           // mov    rbx, qword [r9 + 8*rcx]
	WORD $0x8941; BYTE $0xdc                   // mov    r12d, ebx
	LONG $0xffe48141; WORD $0xffff; BYTE $0x1f // and    r12d, 536870911
	LONG $0x00e38148; WORD $0x0000; BYTE $0xe0 // and    rbx, -536870912
	LONG $0xc91c8949                           // mov    qword [r9 + 8*rcx], rbx
	WORD $0x8548; BYTE $0xc0                   // test    rax, rax
	JNE  LBB10_5
	JMP  LBB10_7

LBB10_3:
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x39e8c148             // shr    rax, 57
	LONG $0xc8440149; BYTE $0x08 // add    qword [r8 + 8*rcx + 8], rax
	WORD $0x214c; BYTE $0xf3     // and    rbx, r14
	LONG $0xc9248b4d             // mov    r12, qword [r9 + 8*rcx]
	WORD $0x894c; BYTE $0xe0     // mov    rax, r12
	LONG $0x39e8c148             // shr    rax, 57
	LONG $0xc9440149; BYTE $0x08 // add    qword [r9 + 8*rcx + 8], rax
	WORD $0x214d; BYTE $0xf4     // and    r12, r14
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB10_7

LBB10_5:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JNE  LBB10_6

LBB10_7:
	WORD $0x8548; BYTE $0xc0                   // test    rax, rax
	JE   LBB10_9
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x07e3c148                           // shl    rbx, 7
	LONG $0x817e8d4d                           // lea    r15, [r14 - 127]
	WORD $0x2149; BYTE $0xdf                   // and    r15, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x27e3c148                           // shl    rbx, 39
	WORD $0x214c; BYTE $0xd3                   // and    rbx, r10
	LONG $0x01568d49                           // lea    rdx, [r14 + 1]
	WORD $0x094c; BYTE $0xfa                   // or    rdx, r15
	WORD $0x2948; BYTE $0xda                   // sub    rdx, rbx
	LONG $0xc8540149; BYTE $0x08               // add    qword [r8 + 8*rcx + 8], rdx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x32eac148                           // shr    rdx, 50
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x12ebc148                           // shr    rbx, 18
	WORD $0x014c; BYTE $0xf2                   // add    rdx, r14
	WORD $0x2948; BYTE $0xda                   // sub    rdx, rbx
	LONG $0xc8540149; BYTE $0x10               // add    qword [r8 + 8*rcx + 16], rdx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x35e2c148                           // shl    rdx, 53
	WORD $0x214c; BYTE $0xda                   // and    rdx, r11
	WORD $0x314c; BYTE $0xf2                   // xor    rdx, r14
	LONG $0xc8540149; BYTE $0x18               // add    qword [r8 + 8*rcx + 24], rdx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x04eac148                           // shr    rdx, 4
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x1ce3c148                           // shl    rbx, 28
	LONG $0x01be8d4d; WORD $0x0000; BYTE $0xf0 // lea    r15, [r14 - 268435455]
	WORD $0x2149; BYTE $0xdf                   // and    r15, rbx
	WORD $0x314c; BYTE $0xf2                   // xor    rdx, r14
	WORD $0x014c; BYTE $0xfa                   // add    rdx, r15
	LONG $0xc8540149; BYTE $0x20               // add    qword [r8 + 8*rcx + 32], rdx
	LONG $0xc8548b49; BYTE $0x28               // mov    rdx, qword [r8 + 8*rcx + 40]
	LONG $0x1de8c148                           // shr    rax, 29
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	LONG $0xffc08348                           // add    rax, -1
	LONG $0xc8448949; BYTE $0x28               // mov    qword [r8 + 8*rcx + 40], rax

LBB10_9:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	JE   LBB10_11
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x07e0c148                           // shl    rax, 7
	LONG $0x81568d49                           // lea    rdx, [r14 - 127]
	WORD $0x2148; BYTE $0xc2                   // and    rdx, rax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x27e0c148                           // shl    rax, 39
	WORD $0x214c; BYTE $0xd0                   // and    rax, r10
	LONG $0x015e8d49                           // lea    rbx, [r14 + 1]
	WORD $0x0948; BYTE $0xd3                   // or    rbx, rdx
	WORD $0x2948; BYTE $0xc3                   // sub    rbx, rax
	LONG $0xc95c0149; BYTE $0x08               // add    qword [r9 + 8*rcx + 8], rbx
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x32e8c148                           // shr    rax, 50
	WORD $0x894c; BYTE $0xe2                   // mov    rdx, r12
	LONG $0x12eac148                           // shr    rdx, 18
	WORD $0x014c; BYTE $0xf0                   // add    rax, r14
	WORD $0x2948; BYTE $0xd0                   // sub    rax, rdx
	LONG $0xc9440149; BYTE $0x10               // add    qword [r9 + 8*rcx + 16], rax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x35e0c148                           // shl    rax, 53
	WORD $0x214c; BYTE $0xd8                   // and    rax, r11
	WORD $0x314c; BYTE $0xf0                   // xor    rax, r14
	LONG $0xc9440149; BYTE $0x18               // add    qword [r9 + 8*rcx + 24], rax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x04e8c148                           // shr    rax, 4
	WORD $0x894c; BYTE $0xe2                   // mov    rdx, r12
	LONG $0x1ce2c148                           // shl    rdx, 28
	LONG $0x019e8d49; WORD $0x0000; BYTE $0xf0 // lea    rbx, [r14 - 268435455]
	WORD $0x2148; BYTE $0xd3                   // and    rbx, rdx
	WORD $0x314c; BYTE $0xf0                   // xor    rax, r14
	WORD $0x0148; BYTE $0xd8                   // add    rax, rbx
	LONG $0xc9440149; BYTE $0x20               // add    qword [r9 + 8*rcx + 32], rax
	LONG $0xc9448b49; BYTE $0x28               // mov    rax, qword [r9 + 8*rcx + 40]
	LONG $0x1decc149                           // shr    r12, 29
	WORD $0x014c; BYTE $0xe0                   // add    rax, r12
	LONG $0xffc08348                           // add    rax, -1
	LONG $0xc9448949; BYTE $0x28               // mov    qword [r9 + 8*rcx + 40], rax
	JMP  LBB10_11

LBB10_12:
	LONG $0x48788349; BYTE $0xff // cmp    qword [r8 + 72], -1
	JE   LBB10_13
	LONG $0x48798349; BYTE $0xff // cmp    qword [r9 + 72], -1
	JE   LBB10_15

LBB10_16:
	LONG $0x7e7ac1c4; WORD $0x2041 // vmovq    xmm0, qword [r9 + 32]
	LONG $0x7e7ac1c4; WORD $0x2048 // vmovq    xmm1, qword [r8 + 32]
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x7e7ac1c4; WORD $0x2849 // vmovq    xmm1, qword [r9 + 40]
	LONG $0x7e7ac1c4; WORD $0x2850 // vmovq    xmm2, qword [r8 + 40]
	LONG $0xe16ce9c5               // vpunpcklqdq    xmm4, xmm2, xmm1
	LONG $0xd073f1c5; BYTE $0x1d   // vpsrlq    xmm1, xmm0, 29
	LONG $0xc0eff9c5               // vpxor    xmm0, xmm0, xmm0
	LONG $0x0271e3c4; WORD $0x0ad0 // vpblendd    xmm2, xmm1, xmm0, 10
	LONG $0xf473e1c5; BYTE $0x1c   // vpsllq    xmm3, xmm4, 28
	LONG $0x4d6ff9c5; BYTE $0x70   // vmovdqa    xmm1, oword 112[rbp] /* [rip + .LCPI10_7] */
	LONG $0xd9dbe1c5               // vpand    xmm3, xmm3, xmm1
	LONG $0xdad4e1c5               // vpaddq    xmm3, xmm3, xmm2
	QUAD $0x00000080956ff9c5       // vmovdqa    xmm2, oword 128[rbp] /* [rip + .LCPI10_8] */
	LONG $0xeadbe1c5               // vpand    xmm5, xmm3, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x0789                   // mov    dword [rdi], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0xd373d1c5; BYTE $0x1d   // vpsrlq    xmm5, xmm3, 29
	WORD $0x0689                   // mov    dword [rsi], eax
	LONG $0xd473c9c5; BYTE $0x01   // vpsrlq    xmm6, xmm4, 1
	QUAD $0x000000909d6ff9c5       // vmovdqa    xmm3, oword 144[rbp] /* [rip + .LCPI10_9] */
	LONG $0xf3dbc9c5               // vpand    xmm6, xmm6, xmm3
	LONG $0xeed4d1c5               // vpaddq    xmm5, xmm5, xmm6
	LONG $0xd573c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm5, 28
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x04       // mov    dword [rdi + 4], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x04       // mov    dword [rsi + 4], eax
	LONG $0x7e7ac1c4; WORD $0x3069 // vmovq    xmm5, qword [r9 + 48]
	LONG $0x7e7ac1c4; WORD $0x3078 // vmovq    xmm7, qword [r8 + 48]
	LONG $0xed6cc1c5               // vpunpcklqdq    xmm5, xmm7, xmm5
	LONG $0xd473d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm4, 29
	LONG $0x0259e3c4; WORD $0x0ae0 // vpblendd    xmm4, xmm4, xmm0, 10
	LONG $0xf573c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm5, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xe7d4d9c5               // vpaddq    xmm4, xmm4, xmm7
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm4, 29
	LONG $0xe2dbd9c5               // vpand    xmm4, xmm4, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x08       // mov    dword [rdi + 8], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x08       // mov    dword [rsi + 8], eax
	LONG $0xd573d9c5; BYTE $0x01   // vpsrlq    xmm4, xmm5, 1
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm4, 28
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x0c       // mov    dword [rdi + 12], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x0c       // mov    dword [rsi + 12], eax
	LONG $0x7e7ac1c4; WORD $0x3861 // vmovq    xmm4, qword [r9 + 56]
	LONG $0x7e7ac1c4; WORD $0x3878 // vmovq    xmm7, qword [r8 + 56]
	LONG $0xe46cc1c5               // vpunpcklqdq    xmm4, xmm7, xmm4
	LONG $0xd573d1c5; BYTE $0x1d   // vpsrlq    xmm5, xmm5, 29
	LONG $0x0251e3c4; WORD $0x0ae8 // vpblendd    xmm5, xmm5, xmm0, 10
	LONG $0xf473c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm4, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xefd4d1c5               // vpaddq    xmm5, xmm5, xmm7
	LONG $0xedd4c9c5               // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd573c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm5, 29
	LONG $0xeadbd1c5               // vpand    xmm5, xmm5, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x10       // mov    dword [rdi + 16], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x10       // mov    dword [rsi + 16], eax
	LONG $0xd473d1c5; BYTE $0x01   // vpsrlq    xmm5, xmm4, 1
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0xedd4c9c5               // vpaddq    xmm5, xmm6, xmm5
	LONG $0xd573c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm5, 28
	LONG $0xebdbd1c5               // vpand    xmm5, xmm5, xmm3
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	WORD $0x4789; BYTE $0x14       // mov    dword [rdi + 20], eax
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	WORD $0x4689; BYTE $0x14       // mov    dword [rsi + 20], eax
	LONG $0x7e7ac1c4; WORD $0x4069 // vmovq    xmm5, qword [r9 + 64]
	LONG $0x7e7ac1c4; WORD $0x4078 // vmovq    xmm7, qword [r8 + 64]
	LONG $0xed6cc1c5               // vpunpcklqdq    xmm5, xmm7, xmm5
	LONG $0xd473d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm4, 29
	LONG $0x0259e3c4; WORD $0x0ae0 // vpblendd    xmm4, xmm4, xmm0, 10
	LONG $0xf573c1c5; BYTE $0x1c   // vpsllq    xmm7, xmm5, 28
	LONG $0xf9dbc1c5               // vpand    xmm7, xmm7, xmm1
	LONG $0xe7d4d9c5               // vpaddq    xmm4, xmm4, xmm7
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1d   // vpsrlq    xmm6, xmm4, 29
	LONG $0xe2dbd9c5               // vpand    xmm4, xmm4, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	WORD $0x4789; BYTE $0x18       // mov    dword [rdi + 24], eax
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	WORD $0x4689; BYTE $0x18       // mov    dword [rsi + 24], eax
	LONG $0xd573d9c5; BYTE $0x01   // vpsrlq    xmm4, xmm5, 1
	LONG $0xe3dbd9c5               // vpand    xmm4, xmm4, xmm3
	LONG $0xe4d4c9c5               // vpaddq    xmm4, xmm6, xmm4
	LONG $0xd473c9c5; BYTE $0x1c   // vpsrlq    xmm6, xmm4, 28
	LONG $0xdbdbd9c5               // vpand    xmm3, xmm4, xmm3
	LONG $0x7ef9e1c4; BYTE $0xd8   // vmovq    rax, xmm3
	WORD $0x4789; BYTE $0x1c       // mov    dword [rdi + 28], eax
	LONG $0x16f9e3c4; WORD $0x01d8 // vpextrq    rax, xmm3, 1
	WORD $0x4689; BYTE $0x1c       // mov    dword [rsi + 28], eax
	LONG $0x7e7ac1c4; WORD $0x4859 // vmovq    xmm3, qword [r9 + 72]
	LONG $0x7e7ac1c4; WORD $0x4860 // vmovq    xmm4, qword [r8 + 72]
	LONG $0xdb6cd9c5               // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0xd573d9c5; BYTE $0x1d   // vpsrlq    xmm4, xmm5, 29
	LONG $0x0259e3c4; WORD $0x0ac0 // vpblendd    xmm0, xmm4, xmm0, 10
	LONG $0xf373e1c5; BYTE $0x1c   // vpsllq    xmm3, xmm3, 28
	LONG $0xc9dbe1c5               // vpand    xmm1, xmm3, xmm1
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc0d4c9c5               // vpaddq    xmm0, xmm6, xmm0
	LONG $0xd073f1c5; BYTE $0x1d   // vpsrlq    xmm1, xmm0, 29
	LONG $0xc2dbf9c5               // vpand    xmm0, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x4789; BYTE $0x20       // mov    dword [rdi + 32], eax
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	WORD $0x4689; BYTE $0x20       // mov    dword [rsi + 32], eax
	LONG $0x7ef9e1c4; BYTE $0xc9   // vmovq    rcx, xmm1
	LONG $0x16f9e3c4; WORD $0x01c8 // vpextrq    rax, xmm1, 1
	LONG $0x20e0c148               // shl    rax, 32
	WORD $0x0948; BYTE $0xc8       // or    rax, rcx
	MOVQ AX, uint64+48(FP)
	RET

LBB10_13:
	QUAD $0x000000004840c749               // mov    qword [r8 + 72], 0
	QUAD $0x000000000000b848; WORD $0xfe00 // mov    rax, -144115188075855872
	LONG $0x40400149                       // add    qword [r8 + 64], rax
	LONG $0x48798349; BYTE $0xff           // cmp    qword [r9 + 72], -1
	JNE  LBB10_16

LBB10_15:
	QUAD $0x000000004841c749               // mov    qword [r9 + 72], 0
	QUAD $0x000000000000b848; WORD $0xfe00 // mov    rax, -144115188075855872
	LONG $0x40410149                       // add    qword [r9 + 64], rax
	JMP  LBB10_16

TEXT 路_sm2P256Square2Way(SB), $0-32

	MOVQ tmp+0(FP), DI
	MOVQ a+8(FP), SI
	MOVQ tmp2+16(FP), DX
	MOVQ a2+24(FP), CX

	WORD $0x8b44; BYTE $0x06                   // mov    r8d, dword [rsi]
	WORD $0x018b                               // mov    eax, dword [rcx]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9c1c4; BYTE $0xc8               // vmovq    xmm1, r8
	LONG $0xe06cf1c5                           // vpunpcklqdq    xmm4, xmm1, xmm0
	LONG $0xc4f4d9c5                           // vpmuludq    xmm0, xmm4, xmm4
	LONG $0x07d6f9c5                           // vmovq    qword [rdi], xmm0
	LONG $0x16f9e3c4; WORD $0x0102             // vpextrq    qword [rdx], xmm0, 1
	LONG $0x04468b44                           // mov    r8d, dword [rsi + 4]
	WORD $0x418b; BYTE $0x04                   // mov    eax, dword [rcx + 4]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x6ef9c1c4; BYTE $0xc8               // vmovq    xmm1, r8
	LONG $0xc06cf1c5                           // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0xccf4f9c5                           // vpmuludq    xmm1, xmm0, xmm4
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x08               // vmovq    qword [rdi + 8], xmm1
	LONG $0x16f9e3c4; WORD $0x084a; BYTE $0x01 // vpextrq    qword [rdx + 8], xmm1, 1
	LONG $0x08468b44                           // mov    r8d, dword [rsi + 8]
	WORD $0x418b; BYTE $0x08                   // mov    eax, dword [rcx + 8]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xd0               // vmovq    xmm2, r8
	LONG $0xc16c69c5                           // vpunpcklqdq    xmm8, xmm2, xmm1
	LONG $0xccf4b9c5                           // vpmuludq    xmm1, xmm8, xmm4
	LONG $0xd0f4f9c5                           // vpmuludq    xmm2, xmm0, xmm0
	LONG $0xcad4f1c5                           // vpaddq    xmm1, xmm1, xmm2
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x10               // vmovq    qword [rdi + 16], xmm1
	LONG $0x16f9e3c4; WORD $0x104a; BYTE $0x01 // vpextrq    qword [rdx + 16], xmm1, 1
	LONG $0x0c468b44                           // mov    r8d, dword [rsi + 12]
	WORD $0x418b; BYTE $0x0c                   // mov    eax, dword [rcx + 12]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xd0               // vmovq    xmm2, r8
	LONG $0xd16ce9c5                           // vpunpcklqdq    xmm2, xmm2, xmm1
	LONG $0xccf4e9c5                           // vpmuludq    xmm1, xmm2, xmm4
	LONG $0xd8f4b9c5                           // vpmuludq    xmm3, xmm8, xmm0
	LONG $0xcbd4f1c5                           // vpaddq    xmm1, xmm1, xmm3
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x18               // vmovq    qword [rdi + 24], xmm1
	LONG $0x16f9e3c4; WORD $0x184a; BYTE $0x01 // vpextrq    qword [rdx + 24], xmm1, 1
	LONG $0x10468b44                           // mov    r8d, dword [rsi + 16]
	WORD $0x418b; BYTE $0x10                   // mov    eax, dword [rcx + 16]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xd8               // vmovq    xmm3, r8
	LONG $0xe96c61c5                           // vpunpcklqdq    xmm13, xmm3, xmm1
	LONG $0xccf491c5                           // vpmuludq    xmm1, xmm13, xmm4
	LONG $0xe8f4e9c5                           // vpmuludq    xmm5, xmm2, xmm0
	LONG $0xedd4d1c5                           // vpaddq    xmm5, xmm5, xmm5
	LONG $0xcdd4f1c5                           // vpaddq    xmm1, xmm1, xmm5
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0xf439c1c4; BYTE $0xe8               // vpmuludq    xmm5, xmm8, xmm8
	LONG $0xcdd4f1c5                           // vpaddq    xmm1, xmm1, xmm5
	LONG $0x4fd6f9c5; BYTE $0x20               // vmovq    qword [rdi + 32], xmm1
	LONG $0x16f9e3c4; WORD $0x204a; BYTE $0x01 // vpextrq    qword [rdx + 32], xmm1, 1
	LONG $0x14468b44                           // mov    r8d, dword [rsi + 20]
	WORD $0x418b; BYTE $0x14                   // mov    eax, dword [rcx + 20]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xe8               // vmovq    xmm5, r8
	LONG $0xe96cd1c5                           // vpunpcklqdq    xmm5, xmm5, xmm1
	LONG $0xccf4d1c5                           // vpmuludq    xmm1, xmm5, xmm4
	LONG $0xf0f491c5                           // vpmuludq    xmm6, xmm13, xmm0
	LONG $0xfaf4b9c5                           // vpmuludq    xmm7, xmm8, xmm2
	LONG $0xf7d4c9c5                           // vpaddq    xmm6, xmm6, xmm7
	LONG $0xc9d4c9c5                           // vpaddq    xmm1, xmm6, xmm1
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x28               // vmovq    qword [rdi + 40], xmm1
	LONG $0x16f9e3c4; WORD $0x284a; BYTE $0x01 // vpextrq    qword [rdx + 40], xmm1, 1
	LONG $0x18468b44                           // mov    r8d, dword [rsi + 24]
	WORD $0x418b; BYTE $0x18                   // mov    eax, dword [rcx + 24]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xf0               // vmovq    xmm6, r8
	LONG $0xf16cc9c5                           // vpunpcklqdq    xmm6, xmm6, xmm1
	LONG $0xccf449c5                           // vpmuludq    xmm9, xmm6, xmm4
	LONG $0xd5d451c5                           // vpaddq    xmm10, xmm5, xmm5
	LONG $0xf8f4a9c5                           // vpmuludq    xmm7, xmm10, xmm0
	LONG $0x7321c1c4; WORD $0x20d2             // vpsrlq    xmm11, xmm10, 32
	LONG $0xc8f4a1c5                           // vpmuludq    xmm1, xmm11, xmm0
	LONG $0xf173f1c5; BYTE $0x20               // vpsllq    xmm1, xmm1, 32
	LONG $0xe1d441c5                           // vpaddq    xmm12, xmm7, xmm1
	LONG $0xf411c1c4; BYTE $0xf8               // vpmuludq    xmm7, xmm13, xmm8
	LONG $0xcaf4e9c5                           // vpmuludq    xmm1, xmm2, xmm2
	LONG $0xc9d4c1c5                           // vpaddq    xmm1, xmm7, xmm1
	LONG $0xc9d4b1c5                           // vpaddq    xmm1, xmm9, xmm1
	LONG $0xc9d499c5                           // vpaddq    xmm1, xmm12, xmm1
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x30               // vmovq    qword [rdi + 48], xmm1
	LONG $0x16f9e3c4; WORD $0x304a; BYTE $0x01 // vpextrq    qword [rdx + 48], xmm1, 1
	LONG $0x1c468b44                           // mov    r8d, dword [rsi + 28]
	WORD $0x418b; BYTE $0x1c                   // mov    eax, dword [rcx + 28]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x6ef9c1c4; BYTE $0xf8               // vmovq    xmm7, r8
	LONG $0xe16c41c5                           // vpunpcklqdq    xmm12, xmm7, xmm1
	LONG $0xccf499c5                           // vpmuludq    xmm1, xmm12, xmm4
	LONG $0xd8f4c9c5                           // vpmuludq    xmm3, xmm6, xmm0
	LONG $0xc9d4e1c5                           // vpaddq    xmm1, xmm3, xmm1
	LONG $0xddf4b9c5                           // vpmuludq    xmm3, xmm8, xmm5
	LONG $0xfaf491c5                           // vpmuludq    xmm7, xmm13, xmm2
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xc9d4e1c5                           // vpaddq    xmm1, xmm3, xmm1
	LONG $0xc9d4f1c5                           // vpaddq    xmm1, xmm1, xmm1
	LONG $0x4fd6f9c5; BYTE $0x38               // vmovq    qword [rdi + 56], xmm1
	LONG $0x16f9e3c4; WORD $0x384a; BYTE $0x01 // vpextrq    qword [rdx + 56], xmm1, 1
	WORD $0x468b; BYTE $0x20                   // mov    eax, dword [rsi + 32]
	WORD $0x498b; BYTE $0x20                   // mov    ecx, dword [rcx + 32]
	LONG $0x6ef9e1c4; BYTE $0xc9               // vmovq    xmm1, rcx
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xc96ce1c5                           // vpunpcklqdq    xmm1, xmm3, xmm1
	LONG $0xf4f471c5                           // vpmuludq    xmm14, xmm1, xmm4
	LONG $0xd419c1c4; BYTE $0xe4               // vpaddq    xmm4, xmm12, xmm12
	LONG $0xf8f4d9c5                           // vpmuludq    xmm7, xmm4, xmm0
	LONG $0xd473b1c5; BYTE $0x20               // vpsrlq    xmm9, xmm4, 32
	LONG $0xd8f4b1c5                           // vpmuludq    xmm3, xmm9, xmm0
	LONG $0xf373e1c5; BYTE $0x20               // vpsllq    xmm3, xmm3, 32
	LONG $0xfbd441c5                           // vpaddq    xmm15, xmm7, xmm3
	LONG $0xfef4b9c5                           // vpmuludq    xmm7, xmm8, xmm6
	LONG $0xdaf4a9c5                           // vpmuludq    xmm3, xmm10, xmm2
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xfaf4a1c5                           // vpmuludq    xmm7, xmm11, xmm2
	LONG $0xf773c1c5; BYTE $0x20               // vpsllq    xmm7, xmm7, 32
	LONG $0xdbd4c1c5                           // vpaddq    xmm3, xmm7, xmm3
	LONG $0xdbd481c5                           // vpaddq    xmm3, xmm15, xmm3
	LONG $0xdbd489c5                           // vpaddq    xmm3, xmm14, xmm3
	LONG $0xdbd4e1c5                           // vpaddq    xmm3, xmm3, xmm3
	LONG $0xf411c1c4; BYTE $0xfd               // vpmuludq    xmm7, xmm13, xmm13
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0x5fd6f9c5; BYTE $0x40               // vmovq    qword [rdi + 64], xmm3
	LONG $0x16f9e3c4; WORD $0x405a; BYTE $0x01 // vpextrq    qword [rdx + 64], xmm3, 1
	LONG $0xc0f4f1c5                           // vpmuludq    xmm0, xmm1, xmm0
	LONG $0xf419c1c4; BYTE $0xd8               // vpmuludq    xmm3, xmm12, xmm8
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xdaf4c9c5                           // vpmuludq    xmm3, xmm6, xmm2
	LONG $0xfdf491c5                           // vpmuludq    xmm7, xmm13, xmm5
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x48               // vmovq    qword [rdi + 72], xmm0
	LONG $0x16f9e3c4; WORD $0x4842; BYTE $0x01 // vpextrq    qword [rdx + 72], xmm0, 1
	LONG $0xc1f439c5                           // vpmuludq    xmm8, xmm8, xmm1
	LONG $0xdaf4d9c5                           // vpmuludq    xmm3, xmm4, xmm2
	LONG $0xfaf4b1c5                           // vpmuludq    xmm7, xmm9, xmm2
	LONG $0xf773c1c5; BYTE $0x20               // vpsllq    xmm7, xmm7, 32
	LONG $0xdfd4e1c5                           // vpaddq    xmm3, xmm3, xmm7
	LONG $0xfef491c5                           // vpmuludq    xmm7, xmm13, xmm6
	LONG $0xc5f4d1c5                           // vpmuludq    xmm0, xmm5, xmm5
	LONG $0xc0d4c1c5                           // vpaddq    xmm0, xmm7, xmm0
	LONG $0xc0d4b9c5                           // vpaddq    xmm0, xmm8, xmm0
	LONG $0xc0d4e1c5                           // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x50               // vmovq    qword [rdi + 80], xmm0
	LONG $0x16f9e3c4; WORD $0x5042; BYTE $0x01 // vpextrq    qword [rdx + 80], xmm0, 1
	LONG $0xc2f4f1c5                           // vpmuludq    xmm0, xmm1, xmm2
	LONG $0xf419c1c4; BYTE $0xd5               // vpmuludq    xmm2, xmm12, xmm13
	LONG $0xddf4c9c5                           // vpmuludq    xmm3, xmm6, xmm5
	LONG $0xd3d4e9c5                           // vpaddq    xmm2, xmm2, xmm3
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x58               // vmovq    qword [rdi + 88], xmm0
	LONG $0x16f9e3c4; WORD $0x5842; BYTE $0x01 // vpextrq    qword [rdx + 88], xmm0, 1
	LONG $0xc1f491c5                           // vpmuludq    xmm0, xmm13, xmm1
	LONG $0xd5f4d9c5                           // vpmuludq    xmm2, xmm4, xmm5
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0xd5f4b1c5                           // vpmuludq    xmm2, xmm9, xmm5
	LONG $0xf273e9c5; BYTE $0x20               // vpsllq    xmm2, xmm2, 32
	LONG $0xc0d4e9c5                           // vpaddq    xmm0, xmm2, xmm0
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0xd6f4c9c5                           // vpmuludq    xmm2, xmm6, xmm6
	LONG $0xc2d4f9c5                           // vpaddq    xmm0, xmm0, xmm2
	LONG $0x47d6f9c5; BYTE $0x60               // vmovq    qword [rdi + 96], xmm0
	LONG $0x16f9e3c4; WORD $0x6042; BYTE $0x01 // vpextrq    qword [rdx + 96], xmm0, 1
	LONG $0xc5f4f1c5                           // vpmuludq    xmm0, xmm1, xmm5
	LONG $0xd6f499c5                           // vpmuludq    xmm2, xmm12, xmm6
	LONG $0xc2d4f9c5                           // vpaddq    xmm0, xmm0, xmm2
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x68               // vmovq    qword [rdi + 104], xmm0
	LONG $0x16f9e3c4; WORD $0x6842; BYTE $0x01 // vpextrq    qword [rdx + 104], xmm0, 1
	LONG $0xc6f4f1c5                           // vpmuludq    xmm0, xmm1, xmm6
	LONG $0xf419c1c4; BYTE $0xd4               // vpmuludq    xmm2, xmm12, xmm12
	LONG $0xc2d4f9c5                           // vpaddq    xmm0, xmm0, xmm2
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x70               // vmovq    qword [rdi + 112], xmm0
	LONG $0x16f9e3c4; WORD $0x7042; BYTE $0x01 // vpextrq    qword [rdx + 112], xmm0, 1
	LONG $0xc1f499c5                           // vpmuludq    xmm0, xmm12, xmm1
	LONG $0xc0d4f9c5                           // vpaddq    xmm0, xmm0, xmm0
	LONG $0x47d6f9c5; BYTE $0x78               // vmovq    qword [rdi + 120], xmm0
	LONG $0x16f9e3c4; WORD $0x7842; BYTE $0x01 // vpextrq    qword [rdx + 120], xmm0, 1
	LONG $0xc1f4f1c5                           // vpmuludq    xmm0, xmm1, xmm1
	QUAD $0x0000008087d6f9c5                   // vmovq    qword [rdi + 128], xmm0
	QUAD $0x0000808216f9e3c4; WORD $0x0100     // vpextrq    qword [rdx + 128], xmm0, 1
	RET
